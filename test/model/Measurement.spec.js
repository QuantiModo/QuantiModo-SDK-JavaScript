/**
 * QuantiModo
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 
 *
 * OpenAPI spec version: 5.8.7
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.quantimodo);
  }
}(this, function(expect, quantimodo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new quantimodo.Measurement();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Measurement', function() {
    it('should create an instance of Measurement', function() {
      // uncomment below and update the code to test Measurement
      //var instane = new quantimodo.Measurement();
      //expect(instance).to.be.a(quantimodo.Measurement);
    });

    it('should have the property variableName (base name: "variableName")', function() {
      // uncomment below and update the code to test the property variableName
      //var instane = new quantimodo.Measurement();
      //expect(instance).to.be();
    });

    it('should have the property sourceName (base name: "sourceName")', function() {
      // uncomment below and update the code to test the property sourceName
      //var instane = new quantimodo.Measurement();
      //expect(instance).to.be();
    });

    it('should have the property startTimeString (base name: "startTimeString")', function() {
      // uncomment below and update the code to test the property startTimeString
      //var instane = new quantimodo.Measurement();
      //expect(instance).to.be();
    });

    it('should have the property startTimeEpoch (base name: "startTimeEpoch")', function() {
      // uncomment below and update the code to test the property startTimeEpoch
      //var instane = new quantimodo.Measurement();
      //expect(instance).to.be();
    });

    it('should have the property value (base name: "value")', function() {
      // uncomment below and update the code to test the property value
      //var instane = new quantimodo.Measurement();
      //expect(instance).to.be();
    });

    it('should have the property originalValue (base name: "originalValue")', function() {
      // uncomment below and update the code to test the property originalValue
      //var instane = new quantimodo.Measurement();
      //expect(instance).to.be();
    });

    it('should have the property originalunitAbbreviatedName (base name: "originalunitAbbreviatedName")', function() {
      // uncomment below and update the code to test the property originalunitAbbreviatedName
      //var instane = new quantimodo.Measurement();
      //expect(instance).to.be();
    });

    it('should have the property unitAbbreviatedName (base name: "unitAbbreviatedName")', function() {
      // uncomment below and update the code to test the property unitAbbreviatedName
      //var instane = new quantimodo.Measurement();
      //expect(instance).to.be();
    });

    it('should have the property note (base name: "note")', function() {
      // uncomment below and update the code to test the property note
      //var instane = new quantimodo.Measurement();
      //expect(instance).to.be();
    });

  });

}));
