/**
 * quantimodo
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.728
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Quantimodo);
  }
}(this, function(expect, Quantimodo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Quantimodo.GetStudyResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetStudyResponse', function() {
    it('should create an instance of GetStudyResponse', function() {
      // uncomment below and update the code to test GetStudyResponse
      //var instane = new Quantimodo.GetStudyResponse();
      //expect(instance).to.be.a(Quantimodo.GetStudyResponse);
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new Quantimodo.GetStudyResponse();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "message")', function() {
      // uncomment below and update the code to test the property message
      //var instane = new Quantimodo.GetStudyResponse();
      //expect(instance).to.be();
    });

    it('should have the property success (base name: "success")', function() {
      // uncomment below and update the code to test the property success
      //var instane = new Quantimodo.GetStudyResponse();
      //expect(instance).to.be();
    });

    it('should have the property data (base name: "data")', function() {
      // uncomment below and update the code to test the property data
      //var instane = new Quantimodo.GetStudyResponse();
      //expect(instance).to.be();
    });

    it('should have the property pairs (base name: "pairs")', function() {
      // uncomment below and update the code to test the property pairs
      //var instane = new Quantimodo.GetStudyResponse();
      //expect(instance).to.be();
    });

    it('should have the property causeProcessedDailyMeasurements (base name: "causeProcessedDailyMeasurements")', function() {
      // uncomment below and update the code to test the property causeProcessedDailyMeasurements
      //var instane = new Quantimodo.GetStudyResponse();
      //expect(instance).to.be();
    });

    it('should have the property effectProcessedDailyMeasurements (base name: "effectProcessedDailyMeasurements")', function() {
      // uncomment below and update the code to test the property effectProcessedDailyMeasurements
      //var instane = new Quantimodo.GetStudyResponse();
      //expect(instance).to.be();
    });

    it('should have the property userStudy (base name: "userStudy")', function() {
      // uncomment below and update the code to test the property userStudy
      //var instane = new Quantimodo.GetStudyResponse();
      //expect(instance).to.be();
    });

    it('should have the property causeVariable (base name: "causeVariable")', function() {
      // uncomment below and update the code to test the property causeVariable
      //var instane = new Quantimodo.GetStudyResponse();
      //expect(instance).to.be();
    });

    it('should have the property charts (base name: "charts")', function() {
      // uncomment below and update the code to test the property charts
      //var instane = new Quantimodo.GetStudyResponse();
      //expect(instance).to.be();
    });

    it('should have the property effectVariable (base name: "effectVariable")', function() {
      // uncomment below and update the code to test the property effectVariable
      //var instane = new Quantimodo.GetStudyResponse();
      //expect(instance).to.be();
    });

    it('should have the property statistics (base name: "statistics")', function() {
      // uncomment below and update the code to test the property statistics
      //var instane = new Quantimodo.GetStudyResponse();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "userId")', function() {
      // uncomment below and update the code to test the property userId
      //var instane = new Quantimodo.GetStudyResponse();
      //expect(instance).to.be();
    });

    it('should have the property highchartArray (base name: "highchartArray")', function() {
      // uncomment below and update the code to test the property highchartArray
      //var instane = new Quantimodo.GetStudyResponse();
      //expect(instance).to.be();
    });

    it('should have the property userCorrelations (base name: "userCorrelations")', function() {
      // uncomment below and update the code to test the property userCorrelations
      //var instane = new Quantimodo.GetStudyResponse();
      //expect(instance).to.be();
    });

    it('should have the property pairsOfAveragesForAllUsers (base name: "pairsOfAveragesForAllUsers")', function() {
      // uncomment below and update the code to test the property pairsOfAveragesForAllUsers
      //var instane = new Quantimodo.GetStudyResponse();
      //expect(instance).to.be();
    });

    it('should have the property text (base name: "text")', function() {
      // uncomment below and update the code to test the property text
      //var instane = new Quantimodo.GetStudyResponse();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new Quantimodo.GetStudyResponse();
      //expect(instance).to.be();
    });

    it('should have the property participantInstructions (base name: "participantInstructions")', function() {
      // uncomment below and update the code to test the property participantInstructions
      //var instane = new Quantimodo.GetStudyResponse();
      //expect(instance).to.be();
    });

    it('should have the property highcharts (base name: "highcharts")', function() {
      // uncomment below and update the code to test the property highcharts
      //var instane = new Quantimodo.GetStudyResponse();
      //expect(instance).to.be();
    });

  });

}));
