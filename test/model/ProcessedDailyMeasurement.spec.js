/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.100414
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Quantimodo);
  }
}(this, function(expect, Quantimodo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Quantimodo.ProcessedDailyMeasurement();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProcessedDailyMeasurement', function() {
    it('should create an instance of ProcessedDailyMeasurement', function() {
      // uncomment below and update the code to test ProcessedDailyMeasurement
      //var instane = new Quantimodo.ProcessedDailyMeasurement();
      //expect(instance).to.be.a(Quantimodo.ProcessedDailyMeasurement);
    });

    it('should have the property duration (base name: "duration")', function() {
      // uncomment below and update the code to test the property duration
      //var instane = new Quantimodo.ProcessedDailyMeasurement();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new Quantimodo.ProcessedDailyMeasurement();
      //expect(instance).to.be();
    });

    it('should have the property note (base name: "note")', function() {
      // uncomment below and update the code to test the property note
      //var instane = new Quantimodo.ProcessedDailyMeasurement();
      //expect(instance).to.be();
    });

    it('should have the property originalUnitId (base name: "originalUnitId")', function() {
      // uncomment below and update the code to test the property originalUnitId
      //var instane = new Quantimodo.ProcessedDailyMeasurement();
      //expect(instance).to.be();
    });

    it('should have the property originalValue (base name: "originalValue")', function() {
      // uncomment below and update the code to test the property originalValue
      //var instane = new Quantimodo.ProcessedDailyMeasurement();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "startDate")', function() {
      // uncomment below and update the code to test the property startDate
      //var instane = new Quantimodo.ProcessedDailyMeasurement();
      //expect(instance).to.be();
    });

    it('should have the property startTimeEpoch (base name: "startTimeEpoch")', function() {
      // uncomment below and update the code to test the property startTimeEpoch
      //var instane = new Quantimodo.ProcessedDailyMeasurement();
      //expect(instance).to.be();
    });

    it('should have the property startTimeString (base name: "startTimeString")', function() {
      // uncomment below and update the code to test the property startTimeString
      //var instane = new Quantimodo.ProcessedDailyMeasurement();
      //expect(instance).to.be();
    });

    it('should have the property unitId (base name: "unitId")', function() {
      // uncomment below and update the code to test the property unitId
      //var instane = new Quantimodo.ProcessedDailyMeasurement();
      //expect(instance).to.be();
    });

    it('should have the property value (base name: "value")', function() {
      // uncomment below and update the code to test the property value
      //var instane = new Quantimodo.ProcessedDailyMeasurement();
      //expect(instance).to.be();
    });

    it('should have the property variableCategoryId (base name: "variableCategoryId")', function() {
      // uncomment below and update the code to test the property variableCategoryId
      //var instane = new Quantimodo.ProcessedDailyMeasurement();
      //expect(instance).to.be();
    });

    it('should have the property variableId (base name: "variableId")', function() {
      // uncomment below and update the code to test the property variableId
      //var instane = new Quantimodo.ProcessedDailyMeasurement();
      //expect(instance).to.be();
    });

    it('should have the property variableName (base name: "variableName")', function() {
      // uncomment below and update the code to test the property variableName
      //var instane = new Quantimodo.ProcessedDailyMeasurement();
      //expect(instance).to.be();
    });

  });

}));
