/**
 * QuantiModo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Default service.
* @module api/DefaultApi
* @version v6
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteAggregateCorrelation operation.
     * @callback module:api/DefaultApi~deleteAggregateCorrelationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Aggregate Correlation
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteAggregateCorrelationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAggregateCorrelation(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAggregateCorrelation");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/aggregate_correlations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApplication operation.
     * @callback module:api/DefaultApi~deleteApplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Application
     * Get the settings for your application configurable at https://builder.quantimo.do
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApplication(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteApplication");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/applications/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCollaborator operation.
     * @callback module:api/DefaultApi~deleteCollaboratorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Collaborator
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteCollaboratorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCollaborator(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCollaborator");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/collaborators/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCommonTag operation.
     * @callback module:api/DefaultApi~deleteCommonTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Common Tag
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteCommonTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCommonTag(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCommonTag");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/common_tags/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConnection operation.
     * @callback module:api/DefaultApi~deleteConnectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Connection
     * Connections to 3rd party data sources that we can import from.
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteConnection(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteConnection");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/connections/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConnector operation.
     * @callback module:api/DefaultApi~deleteConnectorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Connector
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteConnector(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteConnector");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/connectors/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConnectorImport operation.
     * @callback module:api/DefaultApi~deleteConnectorImportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Connector Import
     * A record of attempts to import from a given data source. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteConnectorImportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteConnectorImport(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteConnectorImport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/connector_imports/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConnectorRequest operation.
     * @callback module:api/DefaultApi~deleteConnectorRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Connector Request
     * An API request made to an HTTP endpoint during import from a data source. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteConnectorRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteConnectorRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteConnectorRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/connector_requests/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCorrelation operation.
     * @callback module:api/DefaultApi~deleteCorrelationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Correlation
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteCorrelationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCorrelation(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCorrelation");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/correlations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDeviceToken operation.
     * @callback module:api/DefaultApi~deleteDeviceTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Device Token
     * User token needed to send Android, iOS, or web push notifications. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteDeviceTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDeviceToken(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDeviceToken");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/device_tokens/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMeasurement operation.
     * @callback module:api/DefaultApi~deleteMeasurementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Measurement
     * Measurement
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteMeasurementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMeasurement(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteMeasurement");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/measurements/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMeasurementExport operation.
     * @callback module:api/DefaultApi~deleteMeasurementExportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Measurement Export
     * A request from a user to export their data as a spreadsheet. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteMeasurementExportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMeasurementExport(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteMeasurementExport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/measurement_exports/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMeasurementImport operation.
     * @callback module:api/DefaultApi~deleteMeasurementImportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Measurement Import
     * An uploaded spreadsheet or data file to be imported. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteMeasurementImportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMeasurementImport(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteMeasurementImport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/measurement_imports/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNotification operation.
     * @callback module:api/DefaultApi~deleteNotificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Notification
     * Tracking reminder notifications, messages, and study results. 
     * @param {String} id 
     * @param {module:api/DefaultApi~deleteNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNotification(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNotification");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/notifications/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOAuthAccessToken operation.
     * @callback module:api/DefaultApi~deleteOAuthAccessTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a OAuth Access Token
     * Access tokens are the thing that applications use to make API requests on behalf of a user.  
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteOAuthAccessTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOAuthAccessToken(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOAuthAccessToken");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/oauth_access_tokens/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOAuthClient operation.
     * @callback module:api/DefaultApi~deleteOAuthClientCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a OAuth Client
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteOAuthClientCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOAuthClient(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOAuthClient");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/oauth_clients/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePost operation.
     * @callback module:api/DefaultApi~deletePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Post
     * Published studies at the Journal of Citizen Science. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~deletePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/wp_posts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSentEmail operation.
     * @callback module:api/DefaultApi~deleteSentEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Sent Email
     * A sent email
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteSentEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSentEmail(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSentEmail");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/sent_emails/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStudy operation.
     * @callback module:api/DefaultApi~deleteStudyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Study
     * Study Analysis Settings Saved by Individuals
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteStudyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteStudy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteStudy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/studies/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTrackingReminder operation.
     * @callback module:api/DefaultApi~deleteTrackingReminderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Tracking Reminder
     * Favorite
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteTrackingReminderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTrackingReminder(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTrackingReminder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/tracking_reminders/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTrackingReminderNotification operation.
     * @callback module:api/DefaultApi~deleteTrackingReminderNotificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Tracking Reminder Notification
     * Specific reminder notification instances that still need to be tracked. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteTrackingReminderNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTrackingReminderNotification(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTrackingReminderNotification");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/tracking_reminder_notifications/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/DefaultApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a User
     * Overview of discoveries, research from 's data
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUser(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserTag operation.
     * @callback module:api/DefaultApi~deleteUserTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a User Tag
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteUserTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUserTag(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUserTag");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/user_tags/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserVariable operation.
     * @callback module:api/DefaultApi~deleteUserVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a User Variable
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteUserVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUserVariable(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUserVariable");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/user_variables/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVariable operation.
     * @callback module:api/DefaultApi~deleteVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Variable
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVariable(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteVariable");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/variables/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVariableCategory operation.
     * @callback module:api/DefaultApi~deleteVariableCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Variable Category
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteVariableCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVariableCategory(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteVariableCategory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/variable_categories/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVariableUserSource operation.
     * @callback module:api/DefaultApi~deleteVariableUserSourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Variable User Source
     * A list of data sources for a given variable for a given user. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteVariableUserSourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVariableUserSource(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteVariableUserSource");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/variable_user_sources/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVote operation.
     * @callback module:api/DefaultApi~deleteVoteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Vote
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there's a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteVoteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVote(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteVote");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/votes/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAggregateCorrelation operation.
     * @callback module:api/DefaultApi~getAggregateCorrelationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Aggregate Correlation
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * @param {Number} id 
     * @param {module:api/DefaultApi~getAggregateCorrelationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAggregateCorrelation(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAggregateCorrelation");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/aggregate_correlations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApplication operation.
     * @callback module:api/DefaultApi~getApplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Application
     * Get the settings for your application configurable at https://builder.quantimo.do
     * @param {Number} id 
     * @param {module:api/DefaultApi~getApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getApplication(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getApplication");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/applications/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCollaborator operation.
     * @callback module:api/DefaultApi~getCollaboratorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Collaborator
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~getCollaboratorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCollaborator(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCollaborator");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/collaborators/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommonTag operation.
     * @callback module:api/DefaultApi~getCommonTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Common Tag
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * @param {Number} id 
     * @param {module:api/DefaultApi~getCommonTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCommonTag(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCommonTag");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/common_tags/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConnection operation.
     * @callback module:api/DefaultApi~getConnectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Connection
     * Connections to 3rd party data sources that we can import from.
     * @param {Number} id 
     * @param {module:api/DefaultApi~getConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getConnection(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getConnection");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/connections/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConnector operation.
     * @callback module:api/DefaultApi~getConnectorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Connector
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * @param {Number} id 
     * @param {module:api/DefaultApi~getConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getConnector(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getConnector");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/connectors/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConnectorImport operation.
     * @callback module:api/DefaultApi~getConnectorImportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Connector Import
     * A record of attempts to import from a given data source. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~getConnectorImportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getConnectorImport(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getConnectorImport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/connector_imports/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConnectorRequest operation.
     * @callback module:api/DefaultApi~getConnectorRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Connector Request
     * An API request made to an HTTP endpoint during import from a data source. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~getConnectorRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getConnectorRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getConnectorRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/connector_requests/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorrelation operation.
     * @callback module:api/DefaultApi~getCorrelationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Correlation
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * @param {Number} id 
     * @param {module:api/DefaultApi~getCorrelationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCorrelation(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCorrelation");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/correlations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceToken operation.
     * @callback module:api/DefaultApi~getDeviceTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Device Token
     * User token needed to send Android, iOS, or web push notifications. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~getDeviceTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDeviceToken(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeviceToken");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/device_tokens/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMeasurement operation.
     * @callback module:api/DefaultApi~getMeasurementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Measurement
     * Measurement
     * @param {Number} id 
     * @param {module:api/DefaultApi~getMeasurementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMeasurement(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMeasurement");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/measurements/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMeasurementExport operation.
     * @callback module:api/DefaultApi~getMeasurementExportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Measurement Export
     * A request from a user to export their data as a spreadsheet. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~getMeasurementExportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMeasurementExport(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMeasurementExport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/measurement_exports/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMeasurementImport operation.
     * @callback module:api/DefaultApi~getMeasurementImportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Measurement Import
     * An uploaded spreadsheet or data file to be imported. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~getMeasurementImportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMeasurementImport(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMeasurementImport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/measurement_imports/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotification operation.
     * @callback module:api/DefaultApi~getNotificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Notification
     * Tracking reminder notifications, messages, and study results. 
     * @param {String} id 
     * @param {module:api/DefaultApi~getNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNotification(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNotification");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/notifications/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOAuthAccessToken operation.
     * @callback module:api/DefaultApi~getOAuthAccessTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a OAuth Access Token
     * Access tokens are the thing that applications use to make API requests on behalf of a user.  
     * @param {Number} id 
     * @param {module:api/DefaultApi~getOAuthAccessTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOAuthAccessToken(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOAuthAccessToken");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/oauth_access_tokens/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOAuthClient operation.
     * @callback module:api/DefaultApi~getOAuthClientCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a OAuth Client
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~getOAuthClientCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOAuthClient(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOAuthClient");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/oauth_clients/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPost operation.
     * @callback module:api/DefaultApi~getPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Post
     * Published studies at the Journal of Citizen Science. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~getPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/wp_posts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSentEmail operation.
     * @callback module:api/DefaultApi~getSentEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Sent Email
     * A sent email
     * @param {Number} id 
     * @param {module:api/DefaultApi~getSentEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSentEmail(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSentEmail");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/sent_emails/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStudy operation.
     * @callback module:api/DefaultApi~getStudyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Study
     * Study Analysis Settings Saved by Individuals
     * @param {Number} id 
     * @param {module:api/DefaultApi~getStudyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getStudy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStudy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/studies/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrackingReminder operation.
     * @callback module:api/DefaultApi~getTrackingReminderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Tracking Reminder
     * Favorite
     * @param {Number} id 
     * @param {module:api/DefaultApi~getTrackingReminderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTrackingReminder(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTrackingReminder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/tracking_reminders/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrackingReminderNotification operation.
     * @callback module:api/DefaultApi~getTrackingReminderNotificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Tracking Reminder Notification
     * Specific reminder notification instances that still need to be tracked. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~getTrackingReminderNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTrackingReminderNotification(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTrackingReminderNotification");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/tracking_reminder_notifications/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/DefaultApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a User
     * Overview of discoveries, research from 's data
     * @param {Number} id 
     * @param {module:api/DefaultApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getUser(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserTag operation.
     * @callback module:api/DefaultApi~getUserTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a User Tag
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~getUserTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getUserTag(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserTag");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/user_tags/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserVariable operation.
     * @callback module:api/DefaultApi~getUserVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a User Variable
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * @param {Number} id 
     * @param {module:api/DefaultApi~getUserVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getUserVariable(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserVariable");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/user_variables/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariable operation.
     * @callback module:api/DefaultApi~getVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Variable
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~getVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getVariable(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVariable");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/variables/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariableCategory operation.
     * @callback module:api/DefaultApi~getVariableCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Variable Category
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * @param {Number} id 
     * @param {module:api/DefaultApi~getVariableCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getVariableCategory(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVariableCategory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/variable_categories/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariableUserSource operation.
     * @callback module:api/DefaultApi~getVariableUserSourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Variable User Source
     * A list of data sources for a given variable for a given user. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~getVariableUserSourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getVariableUserSource(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVariableUserSource");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/variable_user_sources/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVote operation.
     * @callback module:api/DefaultApi~getVoteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Vote
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there's a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~getVoteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getVote(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVote");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/votes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAggregateCorrelations operation.
     * @callback module:api/DefaultApi~listAggregateCorrelationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Aggregate Correlations
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {Number} opts.aggregateQmScore 
     * @param {Date} opts.analysisEndedAt 
     * @param {Date} opts.analysisRequestedAt 
     * @param {Date} opts.analysisStartedAt 
     * @param {Number} opts.averageDailyHighCause 
     * @param {Number} opts.averageDailyLowCause 
     * @param {Number} opts.averageEffect 
     * @param {Number} opts.averageEffectFollowingHighCause 
     * @param {Number} opts.averageEffectFollowingLowCause 
     * @param {Number} opts.averageVote 
     * @param {Number} opts.causeBaselineAveragePerDay 
     * @param {Number} opts.causeBaselineAveragePerDurationOfAction 
     * @param {Number} opts.causeChanges 
     * @param {Number} opts.causeTreatmentAveragePerDay 
     * @param {Number} opts.causeTreatmentAveragePerDurationOfAction 
     * @param {Number} opts.causeUnitId 
     * @param {Number} opts.causeVariableCategoryId 
     * @param {Number} opts.causeVariableId 
     * @param {Object} opts.charts 
     * @param {String} opts.clientId 
     * @param {Number} opts.confidenceInterval 
     * @param {Date} opts.createdAt 
     * @param {Number} opts.criticalTValue 
     * @param {String} opts.dataSourceName 
     * @param {Date} opts.deletedAt 
     * @param {Number} opts.durationOfAction 
     * @param {Number} opts.effectBaselineAverage 
     * @param {Number} opts.effectBaselineRelativeStandardDeviation 
     * @param {Number} opts.effectBaselineStandardDeviation 
     * @param {Number} opts.effectChanges 
     * @param {Number} opts.effectFollowUpAverage 
     * @param {Number} opts.effectFollowUpPercentChangeFromBaseline 
     * @param {Number} opts.effectVariableCategoryId 
     * @param {Number} opts.effectVariableId 
     * @param {Number} opts.forwardPearsonCorrelationCoefficient 
     * @param {Number} opts.groupedCauseValueClosestToValuePredictingHighOutcome 
     * @param {Number} opts.groupedCauseValueClosestToValuePredictingLowOutcome 
     * @param {Number} opts.id 
     * @param {Boolean} opts.interestingVariableCategoryPair 
     * @param {String} opts.internalErrorMessage 
     * @param {Date} opts.newestDataAt 
     * @param {Number} opts.numberOfCorrelations 
     * @param {Number} opts.numberOfPairs 
     * @param {Number} opts.numberOfUsers 
     * @param {Number} opts.onsetDelay 
     * @param {Number} opts.optimalPearsonProduct 
     * @param {Number} opts.pValue 
     * @param {Number} opts.populationTraitPearsonCorrelationCoefficient 
     * @param {Number} opts.predictivePearsonCorrelationCoefficient 
     * @param {Number} opts.predictsHighEffectChange 
     * @param {Number} opts.predictsLowEffectChange 
     * @param {Date} opts.publishedAt 
     * @param {String} opts.reasonForAnalysis 
     * @param {Number} opts.reversePearsonCorrelationCoefficient 
     * @param {Number} opts.statisticalSignificance 
     * @param {String} opts.status 
     * @param {Number} opts.tValue 
     * @param {Date} opts.updatedAt 
     * @param {String} opts.userErrorMessage 
     * @param {Number} opts.valuePredictingHighOutcome 
     * @param {Number} opts.valuePredictingLowOutcome 
     * @param {Number} opts.wpPostId 
     * @param {Number} opts.zScore 
     * @param {module:api/DefaultApi~listAggregateCorrelationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listAggregateCorrelations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'aggregate_qm_score': opts['aggregateQmScore'],
        'analysis_ended_at': opts['analysisEndedAt'],
        'analysis_requested_at': opts['analysisRequestedAt'],
        'analysis_started_at': opts['analysisStartedAt'],
        'average_daily_high_cause': opts['averageDailyHighCause'],
        'average_daily_low_cause': opts['averageDailyLowCause'],
        'average_effect': opts['averageEffect'],
        'average_effect_following_high_cause': opts['averageEffectFollowingHighCause'],
        'average_effect_following_low_cause': opts['averageEffectFollowingLowCause'],
        'average_vote': opts['averageVote'],
        'cause_baseline_average_per_day': opts['causeBaselineAveragePerDay'],
        'cause_baseline_average_per_duration_of_action': opts['causeBaselineAveragePerDurationOfAction'],
        'cause_changes': opts['causeChanges'],
        'cause_treatment_average_per_day': opts['causeTreatmentAveragePerDay'],
        'cause_treatment_average_per_duration_of_action': opts['causeTreatmentAveragePerDurationOfAction'],
        'cause_unit_id': opts['causeUnitId'],
        'cause_variable_category_id': opts['causeVariableCategoryId'],
        'cause_variable_id': opts['causeVariableId'],
        'charts': opts['charts'],
        'client_id': opts['clientId'],
        'confidence_interval': opts['confidenceInterval'],
        'created_at': opts['createdAt'],
        'critical_t_value': opts['criticalTValue'],
        'data_source_name': opts['dataSourceName'],
        'deleted_at': opts['deletedAt'],
        'duration_of_action': opts['durationOfAction'],
        'effect_baseline_average': opts['effectBaselineAverage'],
        'effect_baseline_relative_standard_deviation': opts['effectBaselineRelativeStandardDeviation'],
        'effect_baseline_standard_deviation': opts['effectBaselineStandardDeviation'],
        'effect_changes': opts['effectChanges'],
        'effect_follow_up_average': opts['effectFollowUpAverage'],
        'effect_follow_up_percent_change_from_baseline': opts['effectFollowUpPercentChangeFromBaseline'],
        'effect_variable_category_id': opts['effectVariableCategoryId'],
        'effect_variable_id': opts['effectVariableId'],
        'forward_pearson_correlation_coefficient': opts['forwardPearsonCorrelationCoefficient'],
        'grouped_cause_value_closest_to_value_predicting_high_outcome': opts['groupedCauseValueClosestToValuePredictingHighOutcome'],
        'grouped_cause_value_closest_to_value_predicting_low_outcome': opts['groupedCauseValueClosestToValuePredictingLowOutcome'],
        'id': opts['id'],
        'interesting_variable_category_pair': opts['interestingVariableCategoryPair'],
        'internal_error_message': opts['internalErrorMessage'],
        'newest_data_at': opts['newestDataAt'],
        'number_of_correlations': opts['numberOfCorrelations'],
        'number_of_pairs': opts['numberOfPairs'],
        'number_of_users': opts['numberOfUsers'],
        'onset_delay': opts['onsetDelay'],
        'optimal_pearson_product': opts['optimalPearsonProduct'],
        'p_value': opts['pValue'],
        'population_trait_pearson_correlation_coefficient': opts['populationTraitPearsonCorrelationCoefficient'],
        'predictive_pearson_correlation_coefficient': opts['predictivePearsonCorrelationCoefficient'],
        'predicts_high_effect_change': opts['predictsHighEffectChange'],
        'predicts_low_effect_change': opts['predictsLowEffectChange'],
        'published_at': opts['publishedAt'],
        'reason_for_analysis': opts['reasonForAnalysis'],
        'reverse_pearson_correlation_coefficient': opts['reversePearsonCorrelationCoefficient'],
        'statistical_significance': opts['statisticalSignificance'],
        'status': opts['status'],
        't_value': opts['tValue'],
        'updated_at': opts['updatedAt'],
        'user_error_message': opts['userErrorMessage'],
        'value_predicting_high_outcome': opts['valuePredictingHighOutcome'],
        'value_predicting_low_outcome': opts['valuePredictingLowOutcome'],
        'wp_post_id': opts['wpPostId'],
        'z_score': opts['zScore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/aggregate_correlations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApplications operation.
     * @callback module:api/DefaultApi~listApplicationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Applications
     * Get the settings for your application configurable at https://builder.quantimo.do
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {String} opts.additionalSettings 
     * @param {String} opts.address 
     * @param {String} opts.appDescription 
     * @param {String} opts.appDesign 
     * @param {String} opts.appDisplayName 
     * @param {String} opts.appStatus 
     * @param {String} opts.appType 
     * @param {Number} opts.billingEnabled 
     * @param {Boolean} opts.buildEnabled 
     * @param {String} opts.city 
     * @param {String} opts.clientId 
     * @param {String} opts.companyName 
     * @param {String} opts.country 
     * @param {Date} opts.createdAt 
     * @param {Date} opts.deletedAt 
     * @param {Number} opts.enabled 
     * @param {Number} opts.exceedingCallCharge 
     * @param {Number} opts.exceedingCallCount 
     * @param {String} opts.homepageUrl 
     * @param {String} opts.iconUrl 
     * @param {Number} opts.id 
     * @param {String} opts.lastFour 
     * @param {String} opts.longDescription 
     * @param {Number} opts.numberOfCollaboratorsWhereApp 
     * @param {Number} opts.organizationId 
     * @param {Number} opts.outcomeVariableId 
     * @param {Number} opts.physician 
     * @param {Number} opts.planId 
     * @param {Number} opts.predictorVariableId 
     * @param {String} opts.splashScreen 
     * @param {String} opts.state 
     * @param {String} opts.status 
     * @param {Number} opts.stripeActive 
     * @param {String} opts.stripeId 
     * @param {String} opts.stripePlan 
     * @param {String} opts.stripeSubscription 
     * @param {Number} opts.study 
     * @param {Date} opts.subscriptionEndsAt 
     * @param {String} opts.textLogo 
     * @param {Date} opts.trialEndsAt 
     * @param {Date} opts.updatedAt 
     * @param {Number} opts.userId 
     * @param {Number} opts.wpPostId 
     * @param {String} opts.zip 
     * @param {module:api/DefaultApi~listApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listApplications(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'additional_settings': opts['additionalSettings'],
        'address': opts['address'],
        'app_description': opts['appDescription'],
        'app_design': opts['appDesign'],
        'app_display_name': opts['appDisplayName'],
        'app_status': opts['appStatus'],
        'app_type': opts['appType'],
        'billing_enabled': opts['billingEnabled'],
        'build_enabled': opts['buildEnabled'],
        'city': opts['city'],
        'client_id': opts['clientId'],
        'company_name': opts['companyName'],
        'country': opts['country'],
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'enabled': opts['enabled'],
        'exceeding_call_charge': opts['exceedingCallCharge'],
        'exceeding_call_count': opts['exceedingCallCount'],
        'homepage_url': opts['homepageUrl'],
        'icon_url': opts['iconUrl'],
        'id': opts['id'],
        'last_four': opts['lastFour'],
        'long_description': opts['longDescription'],
        'number_of_collaborators_where_app': opts['numberOfCollaboratorsWhereApp'],
        'organization_id': opts['organizationId'],
        'outcome_variable_id': opts['outcomeVariableId'],
        'physician': opts['physician'],
        'plan_id': opts['planId'],
        'predictor_variable_id': opts['predictorVariableId'],
        'splash_screen': opts['splashScreen'],
        'state': opts['state'],
        'status': opts['status'],
        'stripe_active': opts['stripeActive'],
        'stripe_id': opts['stripeId'],
        'stripe_plan': opts['stripePlan'],
        'stripe_subscription': opts['stripeSubscription'],
        'study': opts['study'],
        'subscription_ends_at': opts['subscriptionEndsAt'],
        'text_logo': opts['textLogo'],
        'trial_ends_at': opts['trialEndsAt'],
        'updated_at': opts['updatedAt'],
        'user_id': opts['userId'],
        'wp_post_id': opts['wpPostId'],
        'zip': opts['zip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCollaborators operation.
     * @callback module:api/DefaultApi~listCollaboratorsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Collaborators
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {Number} opts.appId 
     * @param {String} opts.clientId 
     * @param {Date} opts.createdAt 
     * @param {Date} opts.deletedAt 
     * @param {Number} opts.id 
     * @param {String} opts.type 
     * @param {Date} opts.updatedAt 
     * @param {Number} opts.userId 
     * @param {module:api/DefaultApi~listCollaboratorsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listCollaborators(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'app_id': opts['appId'],
        'client_id': opts['clientId'],
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'id': opts['id'],
        'type': opts['type'],
        'updated_at': opts['updatedAt'],
        'user_id': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/collaborators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCommonTags operation.
     * @callback module:api/DefaultApi~listCommonTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Common Tags
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {String} opts.clientId 
     * @param {Number} opts.conversionFactor 
     * @param {Date} opts.createdAt 
     * @param {Date} opts.deletedAt 
     * @param {Number} opts.id 
     * @param {Number} opts.numberOfDataPoints 
     * @param {Number} opts.standardError 
     * @param {Number} opts.tagVariableId 
     * @param {Number} opts.tagVariableUnitId 
     * @param {Number} opts.taggedVariableId 
     * @param {Number} opts.taggedVariableUnitId 
     * @param {Date} opts.updatedAt 
     * @param {module:api/DefaultApi~listCommonTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listCommonTags(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'client_id': opts['clientId'],
        'conversion_factor': opts['conversionFactor'],
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'id': opts['id'],
        'number_of_data_points': opts['numberOfDataPoints'],
        'standard_error': opts['standardError'],
        'tag_variable_id': opts['tagVariableId'],
        'tag_variable_unit_id': opts['tagVariableUnitId'],
        'tagged_variable_id': opts['taggedVariableId'],
        'tagged_variable_unit_id': opts['taggedVariableUnitId'],
        'updated_at': opts['updatedAt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/common_tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConnections operation.
     * @callback module:api/DefaultApi~listConnectionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Connections
     * Connections to 3rd party data sources that we can import from.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {String} opts.clientId 
     * @param {String} opts.connectError 
     * @param {String} opts.connectStatus 
     * @param {Number} opts.connectorId 
     * @param {Date} opts.createdAt 
     * @param {String} opts.credentials 
     * @param {Date} opts.deletedAt 
     * @param {Number} opts.id 
     * @param {Date} opts.importEndedAt 
     * @param {Date} opts.importStartedAt 
     * @param {Date} opts.importedDataEndAt 
     * @param {Date} opts.importedDataFromAt 
     * @param {String} opts.internalErrorMessage 
     * @param {Date} opts.lastSuccessfulUpdatedAt 
     * @param {Date} opts.latestMeasurementAt 
     * @param {Number} opts.numberOfConnectorImports 
     * @param {Number} opts.numberOfConnectorRequests 
     * @param {String} opts.reasonForImport 
     * @param {Number} opts.totalMeasurementsInLastUpdate 
     * @param {String} opts.updateError 
     * @param {Date} opts.updateRequestedAt 
     * @param {String} opts.updateStatus 
     * @param {Date} opts.updatedAt 
     * @param {String} opts.userErrorMessage 
     * @param {Number} opts.userId 
     * @param {String} opts.userMessage 
     * @param {Number} opts.wpPostId 
     * @param {module:api/DefaultApi~listConnectionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listConnections(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'client_id': opts['clientId'],
        'connect_error': opts['connectError'],
        'connect_status': opts['connectStatus'],
        'connector_id': opts['connectorId'],
        'created_at': opts['createdAt'],
        'credentials': opts['credentials'],
        'deleted_at': opts['deletedAt'],
        'id': opts['id'],
        'import_ended_at': opts['importEndedAt'],
        'import_started_at': opts['importStartedAt'],
        'imported_data_end_at': opts['importedDataEndAt'],
        'imported_data_from_at': opts['importedDataFromAt'],
        'internal_error_message': opts['internalErrorMessage'],
        'last_successful_updated_at': opts['lastSuccessfulUpdatedAt'],
        'latest_measurement_at': opts['latestMeasurementAt'],
        'number_of_connector_imports': opts['numberOfConnectorImports'],
        'number_of_connector_requests': opts['numberOfConnectorRequests'],
        'reason_for_import': opts['reasonForImport'],
        'total_measurements_in_last_update': opts['totalMeasurementsInLastUpdate'],
        'update_error': opts['updateError'],
        'update_requested_at': opts['updateRequestedAt'],
        'update_status': opts['updateStatus'],
        'updated_at': opts['updatedAt'],
        'user_error_message': opts['userErrorMessage'],
        'user_id': opts['userId'],
        'user_message': opts['userMessage'],
        'wp_post_id': opts['wpPostId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/connections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConnectorImports operation.
     * @callback module:api/DefaultApi~listConnectorImportsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Connector Imports
     * A record of attempts to import from a given data source. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {Object} opts.additionalMetaData 
     * @param {String} opts.clientId 
     * @param {Number} opts.connectionId 
     * @param {Number} opts.connectorId 
     * @param {Date} opts.connectorRequests 
     * @param {Date} opts.createdAt 
     * @param {String} opts.credentials 
     * @param {Date} opts.deletedAt 
     * @param {Date} opts.earliestMeasurementAt 
     * @param {Number} opts.id 
     * @param {Date} opts.importEndedAt 
     * @param {Date} opts.importStartedAt 
     * @param {Date} opts.importedDataEndAt 
     * @param {Date} opts.importedDataFromAt 
     * @param {String} opts.internalErrorMessage 
     * @param {Date} opts.latestMeasurementAt 
     * @param {Number} opts.numberOfConnectorRequests 
     * @param {Number} opts.numberOfMeasurements 
     * @param {String} opts.reasonForImport 
     * @param {Boolean} opts.success 
     * @param {Date} opts.updatedAt 
     * @param {String} opts.userErrorMessage 
     * @param {Number} opts.userId 
     * @param {module:api/DefaultApi~listConnectorImportsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listConnectorImports(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'additional_meta_data': opts['additionalMetaData'],
        'client_id': opts['clientId'],
        'connection_id': opts['connectionId'],
        'connector_id': opts['connectorId'],
        'connector_requests': opts['connectorRequests'],
        'created_at': opts['createdAt'],
        'credentials': opts['credentials'],
        'deleted_at': opts['deletedAt'],
        'earliest_measurement_at': opts['earliestMeasurementAt'],
        'id': opts['id'],
        'import_ended_at': opts['importEndedAt'],
        'import_started_at': opts['importStartedAt'],
        'imported_data_end_at': opts['importedDataEndAt'],
        'imported_data_from_at': opts['importedDataFromAt'],
        'internal_error_message': opts['internalErrorMessage'],
        'latest_measurement_at': opts['latestMeasurementAt'],
        'number_of_connector_requests': opts['numberOfConnectorRequests'],
        'number_of_measurements': opts['numberOfMeasurements'],
        'reason_for_import': opts['reasonForImport'],
        'success': opts['success'],
        'updated_at': opts['updatedAt'],
        'user_error_message': opts['userErrorMessage'],
        'user_id': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/connector_imports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConnectorRequests operation.
     * @callback module:api/DefaultApi~listConnectorRequestsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Connector Requests
     * An API request made to an HTTP endpoint during import from a data source. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {Number} opts.code 
     * @param {Number} opts.connectionId 
     * @param {Number} opts.connectorId 
     * @param {Number} opts.connectorImportId 
     * @param {String} opts.contentType 
     * @param {Date} opts.createdAt 
     * @param {Date} opts.deletedAt 
     * @param {Number} opts.id 
     * @param {Date} opts.importedDataFromAt 
     * @param {String} opts.method 
     * @param {String} opts.requestBody 
     * @param {Array.<String>} opts.requestHeaders 
     * @param {String} opts.responseBody 
     * @param {Date} opts.updatedAt 
     * @param {String} opts.uri 
     * @param {Number} opts.userId 
     * @param {module:api/DefaultApi~listConnectorRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listConnectorRequests(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'code': opts['code'],
        'connection_id': opts['connectionId'],
        'connector_id': opts['connectorId'],
        'connector_import_id': opts['connectorImportId'],
        'content_type': opts['contentType'],
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'id': opts['id'],
        'imported_data_from_at': opts['importedDataFromAt'],
        'method': opts['method'],
        'request_body': opts['requestBody'],
        'request_headers': this.apiClient.buildCollectionParam(opts['requestHeaders'], 'multi'),
        'response_body': opts['responseBody'],
        'updated_at': opts['updatedAt'],
        'uri': opts['uri'],
        'user_id': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/connector_requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConnectors operation.
     * @callback module:api/DefaultApi~listConnectorsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Connectors
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {String} opts.clientId 
     * @param {Date} opts.createdAt 
     * @param {Date} opts.deletedAt 
     * @param {String} opts.displayName 
     * @param {Boolean} opts.enabled 
     * @param {String} opts.getItUrl 
     * @param {Number} opts.id 
     * @param {String} opts.image 
     * @param {String} opts.isParent 
     * @param {String} opts.longDescription 
     * @param {String} opts.name 
     * @param {String} opts.numberOfConnections 
     * @param {String} opts.numberOfConnectorImports 
     * @param {String} opts.numberOfConnectorRequests 
     * @param {Boolean} opts.oauth 
     * @param {String} opts.qmClient 
     * @param {String} opts.shortDescription 
     * @param {Date} opts.updatedAt 
     * @param {String} opts.wpPostId 
     * @param {module:api/DefaultApi~listConnectorsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listConnectors(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'client_id': opts['clientId'],
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'display_name': opts['displayName'],
        'enabled': opts['enabled'],
        'get_it_url': opts['getItUrl'],
        'id': opts['id'],
        'image': opts['image'],
        'is_parent': opts['isParent'],
        'long_description': opts['longDescription'],
        'name': opts['name'],
        'number_of_connections': opts['numberOfConnections'],
        'number_of_connector_imports': opts['numberOfConnectorImports'],
        'number_of_connector_requests': opts['numberOfConnectorRequests'],
        'oauth': opts['oauth'],
        'qm_client': opts['qmClient'],
        'short_description': opts['shortDescription'],
        'updated_at': opts['updatedAt'],
        'wp_post_id': opts['wpPostId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/connectors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCorrelations operation.
     * @callback module:api/DefaultApi~listCorrelationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Correlations
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {Number} opts.aggregateCorrelationId 
     * @param {Date} opts.aggregatedAt 
     * @param {Date} opts.analysisEndedAt 
     * @param {Date} opts.analysisRequestedAt 
     * @param {Date} opts.analysisStartedAt 
     * @param {Number} opts.averageDailyHighCause 
     * @param {Number} opts.averageDailyLowCause 
     * @param {Number} opts.averageEffect 
     * @param {Number} opts.averageEffectFollowingHighCause 
     * @param {Number} opts.averageEffectFollowingLowCause 
     * @param {Number} opts.averageForwardPearsonCorrelationOverOnsetDelays 
     * @param {Number} opts.averageReversePearsonCorrelationOverOnsetDelays 
     * @param {Number} opts.causalityVote 
     * @param {Number} opts.causeBaselineAveragePerDay 
     * @param {Number} opts.causeBaselineAveragePerDurationOfAction 
     * @param {Number} opts.causeChanges 
     * @param {Number} opts.causeFillingValue 
     * @param {Number} opts.causeNumberOfProcessedDailyMeasurements 
     * @param {Number} opts.causeNumberOfRawMeasurements 
     * @param {Number} opts.causeTreatmentAveragePerDay 
     * @param {Number} opts.causeTreatmentAveragePerDurationOfAction 
     * @param {Number} opts.causeUnitId 
     * @param {Number} opts.causeUserVariableId 
     * @param {Number} opts.causeVariableCategoryId 
     * @param {Number} opts.causeVariableId 
     * @param {Object} opts.charts 
     * @param {String} opts.clientId 
     * @param {Number} opts.confidenceInterval 
     * @param {Date} opts.createdAt 
     * @param {Number} opts.criticalTValue 
     * @param {String} opts.dataSourceName 
     * @param {Date} opts.deletedAt 
     * @param {Number} opts.durationOfAction 
     * @param {Date} opts.earliestMeasurementStartAt 
     * @param {Number} opts.effectBaselineAverage 
     * @param {Number} opts.effectBaselineRelativeStandardDeviation 
     * @param {Number} opts.effectBaselineStandardDeviation 
     * @param {Number} opts.effectChanges 
     * @param {Number} opts.effectFillingValue 
     * @param {Number} opts.effectFollowUpAverage 
     * @param {Number} opts.effectFollowUpPercentChangeFromBaseline 
     * @param {Number} opts.effectNumberOfProcessedDailyMeasurements 
     * @param {Number} opts.effectNumberOfRawMeasurements 
     * @param {Number} opts.effectUserVariableId 
     * @param {Number} opts.effectVariableCategoryId 
     * @param {Number} opts.effectVariableId 
     * @param {Date} opts.experimentEndAt 
     * @param {Date} opts.experimentEndTime 
     * @param {Date} opts.experimentStartAt 
     * @param {Date} opts.experimentStartTime 
     * @param {Number} opts.forwardPearsonCorrelationCoefficient 
     * @param {Number} opts.forwardSpearmanCorrelationCoefficient 
     * @param {Number} opts.groupedCauseValueClosestToValuePredictingHighOutcome 
     * @param {Number} opts.groupedCauseValueClosestToValuePredictingLowOutcome 
     * @param {Number} opts.id 
     * @param {Boolean} opts.interestingVariableCategoryPair 
     * @param {String} opts.internalErrorMessage 
     * @param {Date} opts.latestMeasurementStartAt 
     * @param {Date} opts.newestDataAt 
     * @param {Number} opts.numberOfDays 
     * @param {Number} opts.numberOfPairs 
     * @param {Number} opts.onsetDelay 
     * @param {Number} opts.onsetDelayWithStrongestPearsonCorrelation 
     * @param {Number} opts.optimalPearsonProduct 
     * @param {Number} opts.pValue 
     * @param {Number} opts.pearsonCorrelationWithNoOnsetDelay 
     * @param {Number} opts.predictivePearsonCorrelationCoefficient 
     * @param {Number} opts.predictsHighEffectChange 
     * @param {Number} opts.predictsLowEffectChange 
     * @param {Date} opts.publishedAt 
     * @param {Number} opts.qmScore 
     * @param {String} opts.reasonForAnalysis 
     * @param {Number} opts.reversePearsonCorrelationCoefficient 
     * @param {Number} opts.statisticalSignificance 
     * @param {String} opts.status 
     * @param {Number} opts.strongestPearsonCorrelationCoefficient 
     * @param {Number} opts.tValue 
     * @param {Date} opts.updatedAt 
     * @param {Number} opts.usefulnessVote 
     * @param {String} opts.userErrorMessage 
     * @param {Number} opts.userId 
     * @param {Number} opts.valuePredictingHighOutcome 
     * @param {Number} opts.valuePredictingLowOutcome 
     * @param {Number} opts.wpPostId 
     * @param {Number} opts.zScore 
     * @param {module:api/DefaultApi~listCorrelationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listCorrelations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'aggregate_correlation_id': opts['aggregateCorrelationId'],
        'aggregated_at': opts['aggregatedAt'],
        'analysis_ended_at': opts['analysisEndedAt'],
        'analysis_requested_at': opts['analysisRequestedAt'],
        'analysis_started_at': opts['analysisStartedAt'],
        'average_daily_high_cause': opts['averageDailyHighCause'],
        'average_daily_low_cause': opts['averageDailyLowCause'],
        'average_effect': opts['averageEffect'],
        'average_effect_following_high_cause': opts['averageEffectFollowingHighCause'],
        'average_effect_following_low_cause': opts['averageEffectFollowingLowCause'],
        'average_forward_pearson_correlation_over_onset_delays': opts['averageForwardPearsonCorrelationOverOnsetDelays'],
        'average_reverse_pearson_correlation_over_onset_delays': opts['averageReversePearsonCorrelationOverOnsetDelays'],
        'causality_vote': opts['causalityVote'],
        'cause_baseline_average_per_day': opts['causeBaselineAveragePerDay'],
        'cause_baseline_average_per_duration_of_action': opts['causeBaselineAveragePerDurationOfAction'],
        'cause_changes': opts['causeChanges'],
        'cause_filling_value': opts['causeFillingValue'],
        'cause_number_of_processed_daily_measurements': opts['causeNumberOfProcessedDailyMeasurements'],
        'cause_number_of_raw_measurements': opts['causeNumberOfRawMeasurements'],
        'cause_treatment_average_per_day': opts['causeTreatmentAveragePerDay'],
        'cause_treatment_average_per_duration_of_action': opts['causeTreatmentAveragePerDurationOfAction'],
        'cause_unit_id': opts['causeUnitId'],
        'cause_user_variable_id': opts['causeUserVariableId'],
        'cause_variable_category_id': opts['causeVariableCategoryId'],
        'cause_variable_id': opts['causeVariableId'],
        'charts': opts['charts'],
        'client_id': opts['clientId'],
        'confidence_interval': opts['confidenceInterval'],
        'created_at': opts['createdAt'],
        'critical_t_value': opts['criticalTValue'],
        'data_source_name': opts['dataSourceName'],
        'deleted_at': opts['deletedAt'],
        'duration_of_action': opts['durationOfAction'],
        'earliest_measurement_start_at': opts['earliestMeasurementStartAt'],
        'effect_baseline_average': opts['effectBaselineAverage'],
        'effect_baseline_relative_standard_deviation': opts['effectBaselineRelativeStandardDeviation'],
        'effect_baseline_standard_deviation': opts['effectBaselineStandardDeviation'],
        'effect_changes': opts['effectChanges'],
        'effect_filling_value': opts['effectFillingValue'],
        'effect_follow_up_average': opts['effectFollowUpAverage'],
        'effect_follow_up_percent_change_from_baseline': opts['effectFollowUpPercentChangeFromBaseline'],
        'effect_number_of_processed_daily_measurements': opts['effectNumberOfProcessedDailyMeasurements'],
        'effect_number_of_raw_measurements': opts['effectNumberOfRawMeasurements'],
        'effect_user_variable_id': opts['effectUserVariableId'],
        'effect_variable_category_id': opts['effectVariableCategoryId'],
        'effect_variable_id': opts['effectVariableId'],
        'experiment_end_at': opts['experimentEndAt'],
        'experiment_end_time': opts['experimentEndTime'],
        'experiment_start_at': opts['experimentStartAt'],
        'experiment_start_time': opts['experimentStartTime'],
        'forward_pearson_correlation_coefficient': opts['forwardPearsonCorrelationCoefficient'],
        'forward_spearman_correlation_coefficient': opts['forwardSpearmanCorrelationCoefficient'],
        'grouped_cause_value_closest_to_value_predicting_high_outcome': opts['groupedCauseValueClosestToValuePredictingHighOutcome'],
        'grouped_cause_value_closest_to_value_predicting_low_outcome': opts['groupedCauseValueClosestToValuePredictingLowOutcome'],
        'id': opts['id'],
        'interesting_variable_category_pair': opts['interestingVariableCategoryPair'],
        'internal_error_message': opts['internalErrorMessage'],
        'latest_measurement_start_at': opts['latestMeasurementStartAt'],
        'newest_data_at': opts['newestDataAt'],
        'number_of_days': opts['numberOfDays'],
        'number_of_pairs': opts['numberOfPairs'],
        'onset_delay': opts['onsetDelay'],
        'onset_delay_with_strongest_pearson_correlation': opts['onsetDelayWithStrongestPearsonCorrelation'],
        'optimal_pearson_product': opts['optimalPearsonProduct'],
        'p_value': opts['pValue'],
        'pearson_correlation_with_no_onset_delay': opts['pearsonCorrelationWithNoOnsetDelay'],
        'predictive_pearson_correlation_coefficient': opts['predictivePearsonCorrelationCoefficient'],
        'predicts_high_effect_change': opts['predictsHighEffectChange'],
        'predicts_low_effect_change': opts['predictsLowEffectChange'],
        'published_at': opts['publishedAt'],
        'qm_score': opts['qmScore'],
        'reason_for_analysis': opts['reasonForAnalysis'],
        'reverse_pearson_correlation_coefficient': opts['reversePearsonCorrelationCoefficient'],
        'statistical_significance': opts['statisticalSignificance'],
        'status': opts['status'],
        'strongest_pearson_correlation_coefficient': opts['strongestPearsonCorrelationCoefficient'],
        't_value': opts['tValue'],
        'updated_at': opts['updatedAt'],
        'usefulness_vote': opts['usefulnessVote'],
        'user_error_message': opts['userErrorMessage'],
        'user_id': opts['userId'],
        'value_predicting_high_outcome': opts['valuePredictingHighOutcome'],
        'value_predicting_low_outcome': opts['valuePredictingLowOutcome'],
        'wp_post_id': opts['wpPostId'],
        'z_score': opts['zScore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/correlations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeviceTokens operation.
     * @callback module:api/DefaultApi~listDeviceTokensCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Device Tokens
     * User token needed to send Android, iOS, or web push notifications. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {String} opts.bshafferOauthClientsId 
     * @param {String} opts.clientId 
     * @param {Date} opts.createdAt 
     * @param {Date} opts.deletedAt 
     * @param {String} opts.deviceToken 
     * @param {String} opts.errorMessage 
     * @param {Date} opts.lastCheckedAt 
     * @param {Date} opts.lastNotifiedAt 
     * @param {Number} opts.numberOfNewTrackingReminderNotifications 
     * @param {Number} opts.numberOfNotificationsLastSent 
     * @param {Number} opts.numberOfWaitingTrackingReminderNotifications 
     * @param {String} opts.platform 
     * @param {Date} opts.receivedAt 
     * @param {String} opts.serverHostname 
     * @param {String} opts.serverIp 
     * @param {Date} opts.updatedAt 
     * @param {Number} opts.userId 
     * @param {module:api/DefaultApi~listDeviceTokensCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listDeviceTokens(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'bshaffer_oauth_clients_id': opts['bshafferOauthClientsId'],
        'client_id': opts['clientId'],
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'device_token': opts['deviceToken'],
        'error_message': opts['errorMessage'],
        'last_checked_at': opts['lastCheckedAt'],
        'last_notified_at': opts['lastNotifiedAt'],
        'number_of_new_tracking_reminder_notifications': opts['numberOfNewTrackingReminderNotifications'],
        'number_of_notifications_last_sent': opts['numberOfNotificationsLastSent'],
        'number_of_waiting_tracking_reminder_notifications': opts['numberOfWaitingTrackingReminderNotifications'],
        'platform': opts['platform'],
        'received_at': opts['receivedAt'],
        'server_hostname': opts['serverHostname'],
        'server_ip': opts['serverIp'],
        'updated_at': opts['updatedAt'],
        'user_id': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/device_tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMeasurementExports operation.
     * @callback module:api/DefaultApi~listMeasurementExportsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Measurement Exports
     * A request from a user to export their data as a spreadsheet. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {String} opts.clientId 
     * @param {Date} opts.createdAt 
     * @param {Date} opts.deletedAt 
     * @param {String} opts.errorMessage 
     * @param {Number} opts.id 
     * @param {String} opts.outputType 
     * @param {String} opts.status 
     * @param {String} opts.type 
     * @param {Date} opts.updatedAt 
     * @param {Number} opts.userId 
     * @param {module:api/DefaultApi~listMeasurementExportsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listMeasurementExports(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'client_id': opts['clientId'],
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'error_message': opts['errorMessage'],
        'id': opts['id'],
        'output_type': opts['outputType'],
        'status': opts['status'],
        'type': opts['type'],
        'updated_at': opts['updatedAt'],
        'user_id': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/measurement_exports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMeasurementImports operation.
     * @callback module:api/DefaultApi~listMeasurementImportsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Measurement Imports
     * An uploaded spreadsheet or data file to be imported. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {String} opts.clientId 
     * @param {Date} opts.createdAt 
     * @param {Date} opts.deletedAt 
     * @param {String} opts.errorMessage 
     * @param {String} opts.file 
     * @param {Number} opts.id 
     * @param {Number} opts.sourceId 
     * @param {String} opts.sourceName 
     * @param {String} opts.status 
     * @param {Date} opts.updatedAt 
     * @param {Number} opts.userId 
     * @param {module:api/DefaultApi~listMeasurementImportsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listMeasurementImports(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'client_id': opts['clientId'],
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'error_message': opts['errorMessage'],
        'file': opts['file'],
        'id': opts['id'],
        'source_id': opts['sourceId'],
        'source_name': opts['sourceName'],
        'status': opts['status'],
        'updated_at': opts['updatedAt'],
        'user_id': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/measurement_imports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMeasurements operation.
     * @callback module:api/DefaultApi~listMeasurementsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Measurements
     * Measurement
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {String} opts.clientId 
     * @param {String} opts.connectionId 
     * @param {Number} opts.connectorId 
     * @param {String} opts.connectorImportId 
     * @param {Date} opts.createdAt 
     * @param {Date} opts.deletedAt 
     * @param {Number} opts.duration 
     * @param {String} opts.error 
     * @param {Number} opts.id 
     * @param {Number} opts.latitude 
     * @param {String} opts.location 
     * @param {Number} opts.longitude 
     * @param {Array.<String>} opts.note 
     * @param {Number} opts.originalUnitId 
     * @param {Number} opts.originalValue 
     * @param {Number} opts.sourceId 
     * @param {String} opts.sourceName 
     * @param {Date} opts.startAt 
     * @param {Number} opts.startTime 
     * @param {Number} opts.unitId 
     * @param {Date} opts.updatedAt 
     * @param {Number} opts.userId 
     * @param {Number} opts.userVariableId 
     * @param {Number} opts.value 
     * @param {Number} opts.variableCategoryId 
     * @param {Number} opts.variableId 
     * @param {module:api/DefaultApi~listMeasurementsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listMeasurements(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'client_id': opts['clientId'],
        'connection_id': opts['connectionId'],
        'connector_id': opts['connectorId'],
        'connector_import_id': opts['connectorImportId'],
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'duration': opts['duration'],
        'error': opts['error'],
        'id': opts['id'],
        'latitude': opts['latitude'],
        'location': opts['location'],
        'longitude': opts['longitude'],
        'note': this.apiClient.buildCollectionParam(opts['note'], 'multi'),
        'original_unit_id': opts['originalUnitId'],
        'original_value': opts['originalValue'],
        'source_id': opts['sourceId'],
        'source_name': opts['sourceName'],
        'start_at': opts['startAt'],
        'start_time': opts['startTime'],
        'unit_id': opts['unitId'],
        'updated_at': opts['updatedAt'],
        'user_id': opts['userId'],
        'user_variable_id': opts['userVariableId'],
        'value': opts['value'],
        'variable_category_id': opts['variableCategoryId'],
        'variable_id': opts['variableId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/measurements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNotifications operation.
     * @callback module:api/DefaultApi~listNotificationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Notifications
     * Tracking reminder notifications, messages, and study results. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {Date} opts.createdAt 
     * @param {String} opts.data 
     * @param {String} opts.deletedAt 
     * @param {String} opts.id 
     * @param {Number} opts.notifiableId 
     * @param {String} opts.notifiableType 
     * @param {Date} opts.readAt 
     * @param {String} opts.type 
     * @param {Date} opts.updatedAt 
     * @param {module:api/DefaultApi~listNotificationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listNotifications(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'created_at': opts['createdAt'],
        'data': opts['data'],
        'deleted_at': opts['deletedAt'],
        'id': opts['id'],
        'notifiable_id': opts['notifiableId'],
        'notifiable_type': opts['notifiableType'],
        'read_at': opts['readAt'],
        'type': opts['type'],
        'updated_at': opts['updatedAt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOAuthAccessTokens operation.
     * @callback module:api/DefaultApi~listOAuthAccessTokensCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List OAuth Access Tokens
     * Access tokens are the thing that applications use to make API requests on behalf of a user.  
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {String} opts.accessToken 
     * @param {String} opts.clientId 
     * @param {Date} opts.createdAt 
     * @param {Date} opts.deletedAt 
     * @param {Date} opts.expires 
     * @param {String} opts.scope 
     * @param {Date} opts.updatedAt 
     * @param {Number} opts.userId 
     * @param {module:api/DefaultApi~listOAuthAccessTokensCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listOAuthAccessTokens(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'access_token': opts['accessToken'],
        'client_id': opts['clientId'],
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'expires': opts['expires'],
        'scope': opts['scope'],
        'updated_at': opts['updatedAt'],
        'user_id': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/oauth_access_tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOAuthClients operation.
     * @callback module:api/DefaultApi~listOAuthClientsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List OAuth Clients
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {String} opts.appIdentifier 
     * @param {String} opts.clientId 
     * @param {String} opts.clientSecret 
     * @param {Date} opts.createdAt 
     * @param {Date} opts.deletedAt 
     * @param {Date} opts.earliestMeasurementStartAt 
     * @param {String} opts.grantTypes 
     * @param {String} opts.iconUrl 
     * @param {Date} opts.latestMeasurementStartAt 
     * @param {Number} opts.numberOfAggregateCorrelations 
     * @param {Number} opts.numberOfApplications 
     * @param {Number} opts.numberOfButtonClicks 
     * @param {Number} opts.numberOfCollaborators 
     * @param {Number} opts.numberOfCommonTags 
     * @param {Number} opts.numberOfConnections 
     * @param {Number} opts.numberOfConnectorImports 
     * @param {Number} opts.numberOfConnectors 
     * @param {Number} opts.numberOfCorrelations 
     * @param {Number} opts.numberOfOauthAccessTokens 
     * @param {Number} opts.numberOfOauthAuthorizationCodes 
     * @param {Number} opts.numberOfOauthRefreshTokens 
     * @param {String} opts.redirectUri 
     * @param {Date} opts.updatedAt 
     * @param {Number} opts.userId 
     * @param {module:api/DefaultApi~listOAuthClientsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listOAuthClients(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'app_identifier': opts['appIdentifier'],
        'client_id': opts['clientId'],
        'client_secret': opts['clientSecret'],
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'earliest_measurement_start_at': opts['earliestMeasurementStartAt'],
        'grant_types': opts['grantTypes'],
        'icon_url': opts['iconUrl'],
        'latest_measurement_start_at': opts['latestMeasurementStartAt'],
        'number_of_aggregate_correlations': opts['numberOfAggregateCorrelations'],
        'number_of_applications': opts['numberOfApplications'],
        'number_of_button_clicks': opts['numberOfButtonClicks'],
        'number_of_collaborators': opts['numberOfCollaborators'],
        'number_of_common_tags': opts['numberOfCommonTags'],
        'number_of_connections': opts['numberOfConnections'],
        'number_of_connector_imports': opts['numberOfConnectorImports'],
        'number_of_connectors': opts['numberOfConnectors'],
        'number_of_correlations': opts['numberOfCorrelations'],
        'number_of_oauth_access_tokens': opts['numberOfOauthAccessTokens'],
        'number_of_oauth_authorization_codes': opts['numberOfOauthAuthorizationCodes'],
        'number_of_oauth_refresh_tokens': opts['numberOfOauthRefreshTokens'],
        'redirect_uri': opts['redirectUri'],
        'updated_at': opts['updatedAt'],
        'user_id': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/oauth_clients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPosts operation.
     * @callback module:api/DefaultApi~listPostsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Posts
     * Published studies at the Journal of Citizen Science. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {Number} opts.ID 
     * @param {String} opts.clientId 
     * @param {Number} opts.commentCount 
     * @param {String} opts.commentStatus 
     * @param {Date} opts.createdAt 
     * @param {Date} opts.deletedAt 
     * @param {String} opts.guid 
     * @param {Number} opts.menuOrder 
     * @param {String} opts.pingStatus 
     * @param {String} opts.pinged 
     * @param {Number} opts.postAuthor 
     * @param {String} opts.postContent 
     * @param {String} opts.postContentFiltered 
     * @param {Date} opts.postDate 
     * @param {Date} opts.postDateGmt 
     * @param {String} opts.postExcerpt 
     * @param {String} opts.postMimeType 
     * @param {Date} opts.postModified 
     * @param {Date} opts.postModifiedGmt 
     * @param {String} opts.postName 
     * @param {Number} opts.postParent 
     * @param {String} opts.postPassword 
     * @param {String} opts.postStatus 
     * @param {String} opts.postTitle 
     * @param {String} opts.postType 
     * @param {String} opts.toPing 
     * @param {Date} opts.updatedAt 
     * @param {module:api/DefaultApi~listPostsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listPosts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ID': opts['ID'],
        'client_id': opts['clientId'],
        'comment_count': opts['commentCount'],
        'comment_status': opts['commentStatus'],
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'guid': opts['guid'],
        'menu_order': opts['menuOrder'],
        'ping_status': opts['pingStatus'],
        'pinged': opts['pinged'],
        'post_author': opts['postAuthor'],
        'post_content': opts['postContent'],
        'post_content_filtered': opts['postContentFiltered'],
        'post_date': opts['postDate'],
        'post_date_gmt': opts['postDateGmt'],
        'post_excerpt': opts['postExcerpt'],
        'post_mime_type': opts['postMimeType'],
        'post_modified': opts['postModified'],
        'post_modified_gmt': opts['postModifiedGmt'],
        'post_name': opts['postName'],
        'post_parent': opts['postParent'],
        'post_password': opts['postPassword'],
        'post_status': opts['postStatus'],
        'post_title': opts['postTitle'],
        'post_type': opts['postType'],
        'to_ping': opts['toPing'],
        'updated_at': opts['updatedAt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/wp_posts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSentEmails operation.
     * @callback module:api/DefaultApi~listSentEmailsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Sent Emails
     * A sent email
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {String} opts.clientId 
     * @param {String} opts.content 
     * @param {Date} opts.createdAt 
     * @param {Date} opts.deletedAt 
     * @param {String} opts.emailAddress 
     * @param {Number} opts.id 
     * @param {String} opts.response 
     * @param {String} opts.slug 
     * @param {String} opts.subject 
     * @param {String} opts.type 
     * @param {Date} opts.updatedAt 
     * @param {Number} opts.userId 
     * @param {Number} opts.wpPostId 
     * @param {module:api/DefaultApi~listSentEmailsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listSentEmails(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'client_id': opts['clientId'],
        'content': opts['content'],
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'email_address': opts['emailAddress'],
        'id': opts['id'],
        'response': opts['response'],
        'slug': opts['slug'],
        'subject': opts['subject'],
        'type': opts['type'],
        'updated_at': opts['updatedAt'],
        'user_id': opts['userId'],
        'wp_post_id': opts['wpPostId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/sent_emails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listStudies operation.
     * @callback module:api/DefaultApi~listStudiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Studies
     * Study Analysis Settings Saved by Individuals
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {Date} opts.analysisEndedAt 
     * @param {Array.<Object>} opts.analysisParameters 
     * @param {Date} opts.analysisRequestedAt 
     * @param {Date} opts.analysisSettingsModifiedAt 
     * @param {Date} opts.analysisStartedAt 
     * @param {Number} opts.causeVariableId 
     * @param {String} opts.clientId 
     * @param {String} opts.commentStatus 
     * @param {Date} opts.createdAt 
     * @param {Date} opts.deletedAt 
     * @param {Number} opts.effectVariableId 
     * @param {Array.<Object>} opts.errors 
     * @param {Number} opts.id 
     * @param {String} opts.internalErrorMessage 
     * @param {Date} opts.newestDataAt 
     * @param {Date} opts.publishedAt 
     * @param {String} opts.reasonForAnalysis 
     * @param {String} opts.statistics 
     * @param {String} opts.status 
     * @param {Object} opts.studyImages 
     * @param {String} opts.studyPassword 
     * @param {String} opts.studyStatus 
     * @param {String} opts.type 
     * @param {Date} opts.updatedAt 
     * @param {String} opts.userErrorMessage 
     * @param {Number} opts.userId 
     * @param {String} opts.userStudyText 
     * @param {String} opts.userTitle 
     * @param {Number} opts.wpPostId 
     * @param {module:api/DefaultApi~listStudiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listStudies(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'analysis_ended_at': opts['analysisEndedAt'],
        'analysis_parameters': this.apiClient.buildCollectionParam(opts['analysisParameters'], 'multi'),
        'analysis_requested_at': opts['analysisRequestedAt'],
        'analysis_settings_modified_at': opts['analysisSettingsModifiedAt'],
        'analysis_started_at': opts['analysisStartedAt'],
        'cause_variable_id': opts['causeVariableId'],
        'client_id': opts['clientId'],
        'comment_status': opts['commentStatus'],
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'effect_variable_id': opts['effectVariableId'],
        'errors': this.apiClient.buildCollectionParam(opts['errors'], 'multi'),
        'id': opts['id'],
        'internal_error_message': opts['internalErrorMessage'],
        'newest_data_at': opts['newestDataAt'],
        'published_at': opts['publishedAt'],
        'reason_for_analysis': opts['reasonForAnalysis'],
        'statistics': opts['statistics'],
        'status': opts['status'],
        'study_images': opts['studyImages'],
        'study_password': opts['studyPassword'],
        'study_status': opts['studyStatus'],
        'type': opts['type'],
        'updated_at': opts['updatedAt'],
        'user_error_message': opts['userErrorMessage'],
        'user_id': opts['userId'],
        'user_study_text': opts['userStudyText'],
        'user_title': opts['userTitle'],
        'wp_post_id': opts['wpPostId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/studies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTrackingReminderNotifications operation.
     * @callback module:api/DefaultApi~listTrackingReminderNotificationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Tracking Reminder Notifications
     * Specific reminder notification instances that still need to be tracked. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {String} opts.clientId 
     * @param {Date} opts.createdAt 
     * @param {Date} opts.deletedAt 
     * @param {Number} opts.id 
     * @param {Date} opts.notifiedAt 
     * @param {Date} opts.notifyAt 
     * @param {Date} opts.receivedAt 
     * @param {Number} opts.trackingReminderId 
     * @param {Date} opts.updatedAt 
     * @param {Number} opts.userId 
     * @param {Number} opts.userVariableId 
     * @param {Number} opts.variableId 
     * @param {module:api/DefaultApi~listTrackingReminderNotificationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listTrackingReminderNotifications(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'client_id': opts['clientId'],
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'id': opts['id'],
        'notified_at': opts['notifiedAt'],
        'notify_at': opts['notifyAt'],
        'received_at': opts['receivedAt'],
        'tracking_reminder_id': opts['trackingReminderId'],
        'updated_at': opts['updatedAt'],
        'user_id': opts['userId'],
        'user_variable_id': opts['userVariableId'],
        'variable_id': opts['variableId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/tracking_reminder_notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTrackingReminders operation.
     * @callback module:api/DefaultApi~listTrackingRemindersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Tracking Reminders
     * Favorite
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {Object} opts.additionalMetaData 
     * @param {String} opts.clientId 
     * @param {Date} opts.createdAt 
     * @param {Number} opts.defaultValue 
     * @param {Date} opts.deletedAt 
     * @param {Boolean} opts.email 
     * @param {Number} opts.id 
     * @param {String} opts.imageUrl 
     * @param {String} opts.instructions 
     * @param {Date} opts.lastTracked 
     * @param {Date} opts.latestTrackingReminderNotificationNotifyAt 
     * @param {Boolean} opts.notificationBar 
     * @param {Boolean} opts.popUp 
     * @param {String} opts.reminderEndTime 
     * @param {Number} opts.reminderFrequency 
     * @param {String} opts.reminderSound 
     * @param {String} opts.reminderStartTime 
     * @param {Boolean} opts.sms 
     * @param {String} opts.startTrackingDate 
     * @param {String} opts.stopTrackingDate 
     * @param {Date} opts.updatedAt 
     * @param {Number} opts.userId 
     * @param {Number} opts.userVariableId 
     * @param {Number} opts.variableId 
     * @param {module:api/DefaultApi~listTrackingRemindersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listTrackingReminders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'additional_meta_data': opts['additionalMetaData'],
        'client_id': opts['clientId'],
        'created_at': opts['createdAt'],
        'default_value': opts['defaultValue'],
        'deleted_at': opts['deletedAt'],
        'email': opts['email'],
        'id': opts['id'],
        'image_url': opts['imageUrl'],
        'instructions': opts['instructions'],
        'last_tracked': opts['lastTracked'],
        'latest_tracking_reminder_notification_notify_at': opts['latestTrackingReminderNotificationNotifyAt'],
        'notification_bar': opts['notificationBar'],
        'pop_up': opts['popUp'],
        'reminder_end_time': opts['reminderEndTime'],
        'reminder_frequency': opts['reminderFrequency'],
        'reminder_sound': opts['reminderSound'],
        'reminder_start_time': opts['reminderStartTime'],
        'sms': opts['sms'],
        'start_tracking_date': opts['startTrackingDate'],
        'stop_tracking_date': opts['stopTrackingDate'],
        'updated_at': opts['updatedAt'],
        'user_id': opts['userId'],
        'user_variable_id': opts['userVariableId'],
        'variable_id': opts['variableId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/tracking_reminders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserTags operation.
     * @callback module:api/DefaultApi~listUserTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List User Tags
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {String} opts.clientId 
     * @param {Number} opts.conversionFactor 
     * @param {Date} opts.createdAt 
     * @param {Date} opts.deletedAt 
     * @param {Number} opts.id 
     * @param {Number} opts.tagVariableId 
     * @param {Number} opts.taggedVariableId 
     * @param {Date} opts.updatedAt 
     * @param {Number} opts.userId 
     * @param {module:api/DefaultApi~listUserTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listUserTags(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'client_id': opts['clientId'],
        'conversion_factor': opts['conversionFactor'],
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'id': opts['id'],
        'tag_variable_id': opts['tagVariableId'],
        'tagged_variable_id': opts['taggedVariableId'],
        'updated_at': opts['updatedAt'],
        'user_id': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/user_tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserVariables operation.
     * @callback module:api/DefaultApi~listUserVariablesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List User Variables
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {String} opts.alias 
     * @param {Date} opts.analysisEndedAt 
     * @param {Date} opts.analysisRequestedAt 
     * @param {Date} opts.analysisSettingsModifiedAt 
     * @param {Date} opts.analysisStartedAt 
     * @param {Number} opts.averageSecondsBetweenMeasurements 
     * @param {Number} opts.bestCauseVariableId 
     * @param {Number} opts.bestEffectVariableId 
     * @param {Object} opts.bestUserCorrelation 
     * @param {Number} opts.bestUserCorrelationId 
     * @param {Boolean} opts.causeOnly 
     * @param {Object} opts.charts 
     * @param {String} opts.clientId 
     * @param {String} opts.combinationOperation 
     * @param {Date} opts.createdAt 
     * @param {Array.<Object>} opts.dataSourcesCount 
     * @param {Number} opts.defaultUnitId 
     * @param {Date} opts.deletedAt 
     * @param {String} opts.description 
     * @param {Number} opts.durationOfAction 
     * @param {Number} opts.earliestFillingTime 
     * @param {String} opts.earliestMeasurementTime 
     * @param {Date} opts.earliestNonTaggedMeasurementStartAt 
     * @param {Number} opts.earliestNonTaggedMeasurementTime 
     * @param {Date} opts.earliestSourceMeasurementStartAt 
     * @param {Number} opts.earliestSourceTime 
     * @param {Date} opts.earliestTaggedMeasurementStartAt 
     * @param {Number} opts.earliestTaggedMeasurementTime 
     * @param {Date} opts.experimentEndTime 
     * @param {Date} opts.experimentStartTime 
     * @param {String} opts.fillingType 
     * @param {Number} opts.fillingValue 
     * @param {Number} opts.id 
     * @param {String} opts.informationalUrl 
     * @param {String} opts.internalErrorMessage 
     * @param {Number} opts.joinWith 
     * @param {Number} opts.kurtosis 
     * @param {Date} opts.lastCorrelatedAt 
     * @param {Number} opts.lastOriginalUnitId 
     * @param {Number} opts.lastOriginalValue 
     * @param {Number} opts.lastProcessedDailyValue 
     * @param {Number} opts.lastSourceId 
     * @param {Date} opts.lastSuccessfulUpdateTime 
     * @param {Number} opts.lastUnitId 
     * @param {Number} opts.lastValue 
     * @param {Number} opts.latestFillingTime 
     * @param {String} opts.latestMeasurementTime 
     * @param {Date} opts.latestNonTaggedMeasurementStartAt 
     * @param {Number} opts.latestNonTaggedMeasurementTime 
     * @param {Date} opts.latestSourceMeasurementStartAt 
     * @param {Number} opts.latestSourceTime 
     * @param {Date} opts.latestTaggedMeasurementStartAt 
     * @param {Number} opts.latestTaggedMeasurementTime 
     * @param {Number} opts.latitude 
     * @param {String} opts.location 
     * @param {Number} opts.longitude 
     * @param {Number} opts.maximumAllowedValue 
     * @param {Number} opts.maximumRecordedValue 
     * @param {Number} opts.mean 
     * @param {Number} opts.measurementsAtLastAnalysis 
     * @param {Number} opts.median 
     * @param {Number} opts.medianSecondsBetweenMeasurements 
     * @param {Number} opts.minimumAllowedSecondsBetweenMeasurements 
     * @param {Number} opts.minimumAllowedValue 
     * @param {Number} opts.minimumRecordedValue 
     * @param {Number} opts.mostCommonConnectorId 
     * @param {Number} opts.mostCommonOriginalUnitId 
     * @param {String} opts.mostCommonSourceName 
     * @param {Number} opts.mostCommonValue 
     * @param {Date} opts.newestDataAt 
     * @param {Number} opts.numberOfChanges 
     * @param {Number} opts.numberOfCorrelations 
     * @param {Number} opts.numberOfMeasurementsWithTagsAtLastCorrelation 
     * @param {Number} opts.numberOfProcessedDailyMeasurements 
     * @param {Number} opts.numberOfRawMeasurements 
     * @param {Number} opts.numberOfRawMeasurementsWithTagsJoinsChildren 
     * @param {String} opts.numberOfSoftDeletedMeasurements 
     * @param {Number} opts.numberOfTrackingReminders 
     * @param {Number} opts.numberOfUniqueDailyValues 
     * @param {Number} opts.numberOfUniqueValues 
     * @param {Number} opts.numberOfUserCorrelationsAsCause 
     * @param {Number} opts.numberOfUserCorrelationsAsEffect 
     * @param {Number} opts.onsetDelay 
     * @param {String} opts.optimalValueMessage 
     * @param {Boolean} opts.outcome 
     * @param {Boolean} opts.outcomeOfInterest 
     * @param {Number} opts.parentId 
     * @param {Boolean} opts.predictorOfInterest 
     * @param {Number} opts._public 
     * @param {String} opts.reasonForAnalysis 
     * @param {Number} opts.secondToLastValue 
     * @param {Boolean} opts.shareUserMeasurements 
     * @param {Number} opts.skewness 
     * @param {Number} opts.standardDeviation 
     * @param {String} opts.status 
     * @param {Number} opts.thirdToLastValue 
     * @param {Date} opts.updatedAt 
     * @param {String} opts.userErrorMessage 
     * @param {Number} opts.userId 
     * @param {Number} opts.userMaximumAllowedDailyValue 
     * @param {Number} opts.userMinimumAllowedDailyValue 
     * @param {Number} opts.userMinimumAllowedNonZeroValue 
     * @param {String} opts.valence 
     * @param {Number} opts.variableCategoryId 
     * @param {Number} opts.variableId 
     * @param {Number} opts.variance 
     * @param {String} opts.wikipediaTitle 
     * @param {String} opts.wpPostId 
     * @param {module:api/DefaultApi~listUserVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listUserVariables(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'alias': opts['alias'],
        'analysis_ended_at': opts['analysisEndedAt'],
        'analysis_requested_at': opts['analysisRequestedAt'],
        'analysis_settings_modified_at': opts['analysisSettingsModifiedAt'],
        'analysis_started_at': opts['analysisStartedAt'],
        'average_seconds_between_measurements': opts['averageSecondsBetweenMeasurements'],
        'best_cause_variable_id': opts['bestCauseVariableId'],
        'best_effect_variable_id': opts['bestEffectVariableId'],
        'best_user_correlation': opts['bestUserCorrelation'],
        'best_user_correlation_id': opts['bestUserCorrelationId'],
        'cause_only': opts['causeOnly'],
        'charts': opts['charts'],
        'client_id': opts['clientId'],
        'combination_operation': opts['combinationOperation'],
        'created_at': opts['createdAt'],
        'data_sources_count': this.apiClient.buildCollectionParam(opts['dataSourcesCount'], 'multi'),
        'default_unit_id': opts['defaultUnitId'],
        'deleted_at': opts['deletedAt'],
        'description': opts['description'],
        'duration_of_action': opts['durationOfAction'],
        'earliest_filling_time': opts['earliestFillingTime'],
        'earliest_measurement_time': opts['earliestMeasurementTime'],
        'earliest_non_tagged_measurement_start_at': opts['earliestNonTaggedMeasurementStartAt'],
        'earliest_non_tagged_measurement_time': opts['earliestNonTaggedMeasurementTime'],
        'earliest_source_measurement_start_at': opts['earliestSourceMeasurementStartAt'],
        'earliest_source_time': opts['earliestSourceTime'],
        'earliest_tagged_measurement_start_at': opts['earliestTaggedMeasurementStartAt'],
        'earliest_tagged_measurement_time': opts['earliestTaggedMeasurementTime'],
        'experiment_end_time': opts['experimentEndTime'],
        'experiment_start_time': opts['experimentStartTime'],
        'filling_type': opts['fillingType'],
        'filling_value': opts['fillingValue'],
        'id': opts['id'],
        'informational_url': opts['informationalUrl'],
        'internal_error_message': opts['internalErrorMessage'],
        'join_with': opts['joinWith'],
        'kurtosis': opts['kurtosis'],
        'last_correlated_at': opts['lastCorrelatedAt'],
        'last_original_unit_id': opts['lastOriginalUnitId'],
        'last_original_value': opts['lastOriginalValue'],
        'last_processed_daily_value': opts['lastProcessedDailyValue'],
        'last_source_id': opts['lastSourceId'],
        'last_successful_update_time': opts['lastSuccessfulUpdateTime'],
        'last_unit_id': opts['lastUnitId'],
        'last_value': opts['lastValue'],
        'latest_filling_time': opts['latestFillingTime'],
        'latest_measurement_time': opts['latestMeasurementTime'],
        'latest_non_tagged_measurement_start_at': opts['latestNonTaggedMeasurementStartAt'],
        'latest_non_tagged_measurement_time': opts['latestNonTaggedMeasurementTime'],
        'latest_source_measurement_start_at': opts['latestSourceMeasurementStartAt'],
        'latest_source_time': opts['latestSourceTime'],
        'latest_tagged_measurement_start_at': opts['latestTaggedMeasurementStartAt'],
        'latest_tagged_measurement_time': opts['latestTaggedMeasurementTime'],
        'latitude': opts['latitude'],
        'location': opts['location'],
        'longitude': opts['longitude'],
        'maximum_allowed_value': opts['maximumAllowedValue'],
        'maximum_recorded_value': opts['maximumRecordedValue'],
        'mean': opts['mean'],
        'measurements_at_last_analysis': opts['measurementsAtLastAnalysis'],
        'median': opts['median'],
        'median_seconds_between_measurements': opts['medianSecondsBetweenMeasurements'],
        'minimum_allowed_seconds_between_measurements': opts['minimumAllowedSecondsBetweenMeasurements'],
        'minimum_allowed_value': opts['minimumAllowedValue'],
        'minimum_recorded_value': opts['minimumRecordedValue'],
        'most_common_connector_id': opts['mostCommonConnectorId'],
        'most_common_original_unit_id': opts['mostCommonOriginalUnitId'],
        'most_common_source_name': opts['mostCommonSourceName'],
        'most_common_value': opts['mostCommonValue'],
        'newest_data_at': opts['newestDataAt'],
        'number_of_changes': opts['numberOfChanges'],
        'number_of_correlations': opts['numberOfCorrelations'],
        'number_of_measurements_with_tags_at_last_correlation': opts['numberOfMeasurementsWithTagsAtLastCorrelation'],
        'number_of_processed_daily_measurements': opts['numberOfProcessedDailyMeasurements'],
        'number_of_raw_measurements': opts['numberOfRawMeasurements'],
        'number_of_raw_measurements_with_tags_joins_children': opts['numberOfRawMeasurementsWithTagsJoinsChildren'],
        'number_of_soft_deleted_measurements': opts['numberOfSoftDeletedMeasurements'],
        'number_of_tracking_reminders': opts['numberOfTrackingReminders'],
        'number_of_unique_daily_values': opts['numberOfUniqueDailyValues'],
        'number_of_unique_values': opts['numberOfUniqueValues'],
        'number_of_user_correlations_as_cause': opts['numberOfUserCorrelationsAsCause'],
        'number_of_user_correlations_as_effect': opts['numberOfUserCorrelationsAsEffect'],
        'onset_delay': opts['onsetDelay'],
        'optimal_value_message': opts['optimalValueMessage'],
        'outcome': opts['outcome'],
        'outcome_of_interest': opts['outcomeOfInterest'],
        'parent_id': opts['parentId'],
        'predictor_of_interest': opts['predictorOfInterest'],
        'public': opts['_public'],
        'reason_for_analysis': opts['reasonForAnalysis'],
        'second_to_last_value': opts['secondToLastValue'],
        'share_user_measurements': opts['shareUserMeasurements'],
        'skewness': opts['skewness'],
        'standard_deviation': opts['standardDeviation'],
        'status': opts['status'],
        'third_to_last_value': opts['thirdToLastValue'],
        'updated_at': opts['updatedAt'],
        'user_error_message': opts['userErrorMessage'],
        'user_id': opts['userId'],
        'user_maximum_allowed_daily_value': opts['userMaximumAllowedDailyValue'],
        'user_minimum_allowed_daily_value': opts['userMinimumAllowedDailyValue'],
        'user_minimum_allowed_non_zero_value': opts['userMinimumAllowedNonZeroValue'],
        'valence': opts['valence'],
        'variable_category_id': opts['variableCategoryId'],
        'variable_id': opts['variableId'],
        'variance': opts['variance'],
        'wikipedia_title': opts['wikipediaTitle'],
        'wp_post_id': opts['wpPostId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/user_variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUsers operation.
     * @callback module:api/DefaultApi~listUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Users
     * Overview of discoveries, research from 's data
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {Number} opts.ID 
     * @param {String} opts.address 
     * @param {Date} opts.analysisEndedAt 
     * @param {Date} opts.analysisRequestedAt 
     * @param {Date} opts.analysisSettingsModifiedAt 
     * @param {Date} opts.analysisStartedAt 
     * @param {String} opts.avatarImage 
     * @param {String} opts.birthday 
     * @param {String} opts.cardBrand 
     * @param {String} opts.cardLastFour 
     * @param {String} opts.clientId 
     * @param {Boolean} opts.combineNotifications 
     * @param {String} opts.country 
     * @param {String} opts.coverPhoto 
     * @param {Date} opts.createdAt 
     * @param {String} opts.currency 
     * @param {Number} opts.deleted 
     * @param {Date} opts.deletedAt 
     * @param {String} opts.displayName 
     * @param {String} opts.earliestReminderTime 
     * @param {String} opts.firstName 
     * @param {String} opts.gender 
     * @param {Boolean} opts.getPreviewBuilds 
     * @param {Boolean} opts.hasAndroidApp 
     * @param {Boolean} opts.hasChromeExtension 
     * @param {Boolean} opts.hasIosApp 
     * @param {String} opts.internalErrorMessage 
     * @param {String} opts.language 
     * @param {Date} opts.lastCorrelationAt 
     * @param {Date} opts.lastEmailAt 
     * @param {String} opts.lastFour 
     * @param {Date} opts.lastLoginAt 
     * @param {String} opts.lastName 
     * @param {Date} opts.lastPushAt 
     * @param {Number} opts.lastSmsTrackingReminderNotificationId 
     * @param {String} opts.latestReminderTime 
     * @param {Date} opts.newestDataAt 
     * @param {Number} opts.numberOfApplications 
     * @param {Number} opts.numberOfButtonClicks 
     * @param {Number} opts.numberOfCollaborators 
     * @param {Number} opts.numberOfConnections 
     * @param {Number} opts.numberOfConnectorImports 
     * @param {Number} opts.numberOfConnectorRequests 
     * @param {Number} opts.numberOfCorrelations 
     * @param {Number} opts.numberOfOauthAccessTokens 
     * @param {Number} opts.numberOfOauthAuthorizationCodes 
     * @param {Number} opts.numberOfOauthClients 
     * @param {Number} opts.numberOfOauthRefreshTokens 
     * @param {Number} opts.numberOfRawMeasurementsWithTags 
     * @param {Number} opts.numberOfRawMeasurementsWithTagsAtLastCorrelation 
     * @param {Number} opts.numberOfStudies 
     * @param {Number} opts.numberOfTrackingReminders 
     * @param {Number} opts.numberOfUserVariables 
     * @param {Number} opts.numberOfVotes 
     * @param {Boolean} opts.oldUser 
     * @param {String} opts.phoneNumber 
     * @param {String} opts.phoneVerificationCode 
     * @param {Number} opts.primaryOutcomeVariableId 
     * @param {String} opts.providerId 
     * @param {String} opts.providerToken 
     * @param {Boolean} opts.pushNotificationsEnabled 
     * @param {String} opts.reasonForAnalysis 
     * @param {Number} opts.referrerUserId 
     * @param {String} opts.refreshToken 
     * @param {String} opts.regProvider 
     * @param {String} opts.rememberToken 
     * @param {Array.<String>} opts.roles 
     * @param {Boolean} opts.sendPredictorEmails 
     * @param {Boolean} opts.sendReminderNotificationEmails 
     * @param {Boolean} opts.smsNotificationsEnabled 
     * @param {Number} opts.spam 
     * @param {String} opts.state 
     * @param {String} opts.status 
     * @param {Boolean} opts.stripeActive 
     * @param {String} opts.stripeId 
     * @param {String} opts.stripePlan 
     * @param {String} opts.stripeSubscription 
     * @param {Date} opts.subscriptionEndsAt 
     * @param {String} opts.subscriptionProvider 
     * @param {String} opts.tagLine 
     * @param {Number} opts.timeZoneOffset 
     * @param {String} opts.timezone 
     * @param {Boolean} opts.trackLocation 
     * @param {Date} opts.trialEndsAt 
     * @param {Boolean} opts.unsubscribed 
     * @param {Date} opts.updatedAt 
     * @param {String} opts.userActivationKey 
     * @param {String} opts.userEmail 
     * @param {String} opts.userErrorMessage 
     * @param {String} opts.userLogin 
     * @param {String} opts.userNicename 
     * @param {String} opts.userPass 
     * @param {Date} opts.userRegistered 
     * @param {Number} opts.userStatus 
     * @param {String} opts.userUrl 
     * @param {String} opts.verified 
     * @param {Number} opts.wpPostId 
     * @param {String} opts.zipCode 
     * @param {module:api/DefaultApi~listUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listUsers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ID': opts['ID'],
        'address': opts['address'],
        'analysis_ended_at': opts['analysisEndedAt'],
        'analysis_requested_at': opts['analysisRequestedAt'],
        'analysis_settings_modified_at': opts['analysisSettingsModifiedAt'],
        'analysis_started_at': opts['analysisStartedAt'],
        'avatar_image': opts['avatarImage'],
        'birthday': opts['birthday'],
        'card_brand': opts['cardBrand'],
        'card_last_four': opts['cardLastFour'],
        'client_id': opts['clientId'],
        'combine_notifications': opts['combineNotifications'],
        'country': opts['country'],
        'cover_photo': opts['coverPhoto'],
        'created_at': opts['createdAt'],
        'currency': opts['currency'],
        'deleted': opts['deleted'],
        'deleted_at': opts['deletedAt'],
        'display_name': opts['displayName'],
        'earliest_reminder_time': opts['earliestReminderTime'],
        'first_name': opts['firstName'],
        'gender': opts['gender'],
        'get_preview_builds': opts['getPreviewBuilds'],
        'has_android_app': opts['hasAndroidApp'],
        'has_chrome_extension': opts['hasChromeExtension'],
        'has_ios_app': opts['hasIosApp'],
        'internal_error_message': opts['internalErrorMessage'],
        'language': opts['language'],
        'last_correlation_at': opts['lastCorrelationAt'],
        'last_email_at': opts['lastEmailAt'],
        'last_four': opts['lastFour'],
        'last_login_at': opts['lastLoginAt'],
        'last_name': opts['lastName'],
        'last_push_at': opts['lastPushAt'],
        'last_sms_tracking_reminder_notification_id': opts['lastSmsTrackingReminderNotificationId'],
        'latest_reminder_time': opts['latestReminderTime'],
        'newest_data_at': opts['newestDataAt'],
        'number_of_applications': opts['numberOfApplications'],
        'number_of_button_clicks': opts['numberOfButtonClicks'],
        'number_of_collaborators': opts['numberOfCollaborators'],
        'number_of_connections': opts['numberOfConnections'],
        'number_of_connector_imports': opts['numberOfConnectorImports'],
        'number_of_connector_requests': opts['numberOfConnectorRequests'],
        'number_of_correlations': opts['numberOfCorrelations'],
        'number_of_oauth_access_tokens': opts['numberOfOauthAccessTokens'],
        'number_of_oauth_authorization_codes': opts['numberOfOauthAuthorizationCodes'],
        'number_of_oauth_clients': opts['numberOfOauthClients'],
        'number_of_oauth_refresh_tokens': opts['numberOfOauthRefreshTokens'],
        'number_of_raw_measurements_with_tags': opts['numberOfRawMeasurementsWithTags'],
        'number_of_raw_measurements_with_tags_at_last_correlation': opts['numberOfRawMeasurementsWithTagsAtLastCorrelation'],
        'number_of_studies': opts['numberOfStudies'],
        'number_of_tracking_reminders': opts['numberOfTrackingReminders'],
        'number_of_user_variables': opts['numberOfUserVariables'],
        'number_of_votes': opts['numberOfVotes'],
        'old_user': opts['oldUser'],
        'phone_number': opts['phoneNumber'],
        'phone_verification_code': opts['phoneVerificationCode'],
        'primary_outcome_variable_id': opts['primaryOutcomeVariableId'],
        'provider_id': opts['providerId'],
        'provider_token': opts['providerToken'],
        'push_notifications_enabled': opts['pushNotificationsEnabled'],
        'reason_for_analysis': opts['reasonForAnalysis'],
        'referrer_user_id': opts['referrerUserId'],
        'refresh_token': opts['refreshToken'],
        'reg_provider': opts['regProvider'],
        'remember_token': opts['rememberToken'],
        'roles': this.apiClient.buildCollectionParam(opts['roles'], 'multi'),
        'send_predictor_emails': opts['sendPredictorEmails'],
        'send_reminder_notification_emails': opts['sendReminderNotificationEmails'],
        'sms_notifications_enabled': opts['smsNotificationsEnabled'],
        'spam': opts['spam'],
        'state': opts['state'],
        'status': opts['status'],
        'stripe_active': opts['stripeActive'],
        'stripe_id': opts['stripeId'],
        'stripe_plan': opts['stripePlan'],
        'stripe_subscription': opts['stripeSubscription'],
        'subscription_ends_at': opts['subscriptionEndsAt'],
        'subscription_provider': opts['subscriptionProvider'],
        'tag_line': opts['tagLine'],
        'time_zone_offset': opts['timeZoneOffset'],
        'timezone': opts['timezone'],
        'track_location': opts['trackLocation'],
        'trial_ends_at': opts['trialEndsAt'],
        'unsubscribed': opts['unsubscribed'],
        'updated_at': opts['updatedAt'],
        'user_activation_key': opts['userActivationKey'],
        'user_email': opts['userEmail'],
        'user_error_message': opts['userErrorMessage'],
        'user_login': opts['userLogin'],
        'user_nicename': opts['userNicename'],
        'user_pass': opts['userPass'],
        'user_registered': opts['userRegistered'],
        'user_status': opts['userStatus'],
        'user_url': opts['userUrl'],
        'verified': opts['verified'],
        'wp_post_id': opts['wpPostId'],
        'zip_code': opts['zipCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVariableCategories operation.
     * @callback module:api/DefaultApi~listVariableCategoriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Variable Categories
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {String} opts.averageSecondsBetweenMeasurements 
     * @param {Boolean} opts.causeOnly 
     * @param {String} opts.combinationOperation 
     * @param {Date} opts.createdAt 
     * @param {Number} opts.defaultUnitId 
     * @param {Date} opts.deletedAt 
     * @param {Number} opts.durationOfAction 
     * @param {String} opts.fillingType 
     * @param {Number} opts.fillingValue 
     * @param {Number} opts.id 
     * @param {String} opts.imageUrl 
     * @param {String} opts.manualTracking 
     * @param {Number} opts.maximumAllowedValue 
     * @param {String} opts.medianSecondsBetweenMeasurements 
     * @param {String} opts.minimumAllowedSecondsBetweenMeasurements 
     * @param {Number} opts.minimumAllowedValue 
     * @param {String} opts.name 
     * @param {String} opts.numberOfOutcomeCaseStudies 
     * @param {String} opts.numberOfOutcomePopulationStudies 
     * @param {String} opts.numberOfPredictorCaseStudies 
     * @param {String} opts.numberOfPredictorPopulationStudies 
     * @param {Number} opts.onsetDelay 
     * @param {Boolean} opts.outcome 
     * @param {Number} opts._public 
     * @param {Number} opts.updated 
     * @param {Date} opts.updatedAt 
     * @param {String} opts.wpPostId 
     * @param {module:api/DefaultApi~listVariableCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listVariableCategories(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'average_seconds_between_measurements': opts['averageSecondsBetweenMeasurements'],
        'cause_only': opts['causeOnly'],
        'combination_operation': opts['combinationOperation'],
        'created_at': opts['createdAt'],
        'default_unit_id': opts['defaultUnitId'],
        'deleted_at': opts['deletedAt'],
        'duration_of_action': opts['durationOfAction'],
        'filling_type': opts['fillingType'],
        'filling_value': opts['fillingValue'],
        'id': opts['id'],
        'image_url': opts['imageUrl'],
        'manual_tracking': opts['manualTracking'],
        'maximum_allowed_value': opts['maximumAllowedValue'],
        'median_seconds_between_measurements': opts['medianSecondsBetweenMeasurements'],
        'minimum_allowed_seconds_between_measurements': opts['minimumAllowedSecondsBetweenMeasurements'],
        'minimum_allowed_value': opts['minimumAllowedValue'],
        'name': opts['name'],
        'number_of_outcome_case_studies': opts['numberOfOutcomeCaseStudies'],
        'number_of_outcome_population_studies': opts['numberOfOutcomePopulationStudies'],
        'number_of_predictor_case_studies': opts['numberOfPredictorCaseStudies'],
        'number_of_predictor_population_studies': opts['numberOfPredictorPopulationStudies'],
        'onset_delay': opts['onsetDelay'],
        'outcome': opts['outcome'],
        'public': opts['_public'],
        'updated': opts['updated'],
        'updated_at': opts['updatedAt'],
        'wp_post_id': opts['wpPostId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/variable_categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVariableUserSources operation.
     * @callback module:api/DefaultApi~listVariableUserSourcesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Variable User Sources
     * A list of data sources for a given variable for a given user. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {String} opts.clientId 
     * @param {Date} opts.createdAt 
     * @param {String} opts.dataSourceName 
     * @param {Date} opts.deletedAt 
     * @param {Date} opts.earliestMeasurementStartAt 
     * @param {Number} opts.earliestMeasurementTime 
     * @param {Number} opts.id 
     * @param {Date} opts.latestMeasurementStartAt 
     * @param {Number} opts.latestMeasurementTime 
     * @param {Number} opts.numberOfRawMeasurements 
     * @param {Number} opts.sourceId 
     * @param {Number} opts.timestamp 
     * @param {Date} opts.updatedAt 
     * @param {Number} opts.userId 
     * @param {Number} opts.userVariableId 
     * @param {Number} opts.variableId 
     * @param {module:api/DefaultApi~listVariableUserSourcesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listVariableUserSources(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'client_id': opts['clientId'],
        'created_at': opts['createdAt'],
        'data_source_name': opts['dataSourceName'],
        'deleted_at': opts['deletedAt'],
        'earliest_measurement_start_at': opts['earliestMeasurementStartAt'],
        'earliest_measurement_time': opts['earliestMeasurementTime'],
        'id': opts['id'],
        'latest_measurement_start_at': opts['latestMeasurementStartAt'],
        'latest_measurement_time': opts['latestMeasurementTime'],
        'number_of_raw_measurements': opts['numberOfRawMeasurements'],
        'source_id': opts['sourceId'],
        'timestamp': opts['timestamp'],
        'updated_at': opts['updatedAt'],
        'user_id': opts['userId'],
        'user_variable_id': opts['userVariableId'],
        'variable_id': opts['variableId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/variable_user_sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVariables operation.
     * @callback module:api/DefaultApi~listVariablesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Variables
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {Object} opts.additionalMetaData 
     * @param {Date} opts.analysisEndedAt 
     * @param {Date} opts.analysisRequestedAt 
     * @param {Date} opts.analysisSettingsModifiedAt 
     * @param {Date} opts.analysisStartedAt 
     * @param {Number} opts.averageSecondsBetweenMeasurements 
     * @param {Object} opts.bestAggregateCorrelation 
     * @param {Number} opts.bestAggregateCorrelationId 
     * @param {Number} opts.bestCauseVariableId 
     * @param {Number} opts.bestEffectVariableId 
     * @param {String} opts.brandName 
     * @param {Boolean} opts.causeOnly 
     * @param {Object} opts.charts 
     * @param {String} opts.clientId 
     * @param {String} opts.combinationOperation 
     * @param {String} opts.commonAlias 
     * @param {Number} opts.commonMaximumAllowedDailyValue 
     * @param {Number} opts.commonMinimumAllowedDailyValue 
     * @param {Number} opts.commonMinimumAllowedNonZeroValue 
     * @param {Date} opts.createdAt 
     * @param {Number} opts.creatorUserId 
     * @param {Array.<Object>} opts.dataSourcesCount 
     * @param {Number} opts.defaultUnitId 
     * @param {Number} opts.defaultValue 
     * @param {Date} opts.deletedAt 
     * @param {String} opts.description 
     * @param {Number} opts.durationOfAction 
     * @param {String} opts.earliestMeasurementTime 
     * @param {Date} opts.earliestNonTaggedMeasurementStartAt 
     * @param {Number} opts.earliestNonTaggedMeasurementTime 
     * @param {Date} opts.earliestTaggedMeasurementStartAt 
     * @param {Number} opts.earliestTaggedMeasurementTime 
     * @param {String} opts.fillingType 
     * @param {Number} opts.fillingValue 
     * @param {Number} opts.id 
     * @param {String} opts.imageUrl 
     * @param {String} opts.informationalUrl 
     * @param {String} opts.internalErrorMessage 
     * @param {String} opts.ionIcon 
     * @param {Number} opts.kurtosis 
     * @param {Date} opts.lastSuccessfulUpdateTime 
     * @param {String} opts.latestMeasurementTime 
     * @param {Date} opts.latestNonTaggedMeasurementStartAt 
     * @param {Number} opts.latestNonTaggedMeasurementTime 
     * @param {Date} opts.latestTaggedMeasurementStartAt 
     * @param {Number} opts.latestTaggedMeasurementTime 
     * @param {Boolean} opts.manualTracking 
     * @param {Number} opts.maximumAllowedValue 
     * @param {Number} opts.maximumRecordedValue 
     * @param {Number} opts.mean 
     * @param {Number} opts.median 
     * @param {Number} opts.medianSecondsBetweenMeasurements 
     * @param {Number} opts.minimumAllowedSecondsBetweenMeasurements 
     * @param {Number} opts.minimumAllowedValue 
     * @param {Number} opts.minimumRecordedValue 
     * @param {Number} opts.mostCommonConnectorId 
     * @param {Number} opts.mostCommonOriginalUnitId 
     * @param {String} opts.mostCommonSourceName 
     * @param {Number} opts.mostCommonValue 
     * @param {String} opts.name 
     * @param {Date} opts.newestDataAt 
     * @param {Number} opts.numberCommonTaggedBy 
     * @param {Number} opts.numberOfAggregateCorrelationsAsCause 
     * @param {Number} opts.numberOfAggregateCorrelationsAsEffect 
     * @param {String} opts.numberOfApplicationsWhereOutcomeVariable 
     * @param {String} opts.numberOfApplicationsWherePredictorVariable 
     * @param {Number} opts.numberOfCommonTags 
     * @param {String} opts.numberOfCommonTagsWhereTagVariable 
     * @param {String} opts.numberOfCommonTagsWhereTaggedVariable 
     * @param {String} opts.numberOfOutcomeCaseStudies 
     * @param {String} opts.numberOfOutcomePopulationStudies 
     * @param {String} opts.numberOfPredictorPopulationStudies 
     * @param {Number} opts.numberOfRawMeasurements 
     * @param {Number} opts.numberOfRawMeasurementsWithTagsJoinsChildren 
     * @param {String} opts.numberOfSoftDeletedMeasurements 
     * @param {Number} opts.numberOfTrackingReminders 
     * @param {Number} opts.numberOfUniqueValues 
     * @param {Number} opts.numberOfUserVariables 
     * @param {Number} opts.onsetDelay 
     * @param {String} opts.optimalValueMessage 
     * @param {Boolean} opts.outcome 
     * @param {Number} opts.parentId 
     * @param {Number} opts.price 
     * @param {String} opts.productUrl 
     * @param {Number} opts._public 
     * @param {String} opts.reasonForAnalysis 
     * @param {Number} opts.secondMostCommonValue 
     * @param {Number} opts.skewness 
     * @param {Number} opts.standardDeviation 
     * @param {String} opts.status 
     * @param {Array.<String>} opts.synonyms 
     * @param {Number} opts.thirdMostCommonValue 
     * @param {String} opts.upc12 
     * @param {String} opts.upc14 
     * @param {Date} opts.updatedAt 
     * @param {String} opts.userErrorMessage 
     * @param {String} opts.valence 
     * @param {Number} opts.variableCategoryId 
     * @param {Number} opts.variance 
     * @param {String} opts.wikipediaTitle 
     * @param {String} opts.wikipediaUrl 
     * @param {String} opts.wpPostId 
     * @param {module:api/DefaultApi~listVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listVariables(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'additional_meta_data': opts['additionalMetaData'],
        'analysis_ended_at': opts['analysisEndedAt'],
        'analysis_requested_at': opts['analysisRequestedAt'],
        'analysis_settings_modified_at': opts['analysisSettingsModifiedAt'],
        'analysis_started_at': opts['analysisStartedAt'],
        'average_seconds_between_measurements': opts['averageSecondsBetweenMeasurements'],
        'best_aggregate_correlation': opts['bestAggregateCorrelation'],
        'best_aggregate_correlation_id': opts['bestAggregateCorrelationId'],
        'best_cause_variable_id': opts['bestCauseVariableId'],
        'best_effect_variable_id': opts['bestEffectVariableId'],
        'brand_name': opts['brandName'],
        'cause_only': opts['causeOnly'],
        'charts': opts['charts'],
        'client_id': opts['clientId'],
        'combination_operation': opts['combinationOperation'],
        'common_alias': opts['commonAlias'],
        'common_maximum_allowed_daily_value': opts['commonMaximumAllowedDailyValue'],
        'common_minimum_allowed_daily_value': opts['commonMinimumAllowedDailyValue'],
        'common_minimum_allowed_non_zero_value': opts['commonMinimumAllowedNonZeroValue'],
        'created_at': opts['createdAt'],
        'creator_user_id': opts['creatorUserId'],
        'data_sources_count': this.apiClient.buildCollectionParam(opts['dataSourcesCount'], 'multi'),
        'default_unit_id': opts['defaultUnitId'],
        'default_value': opts['defaultValue'],
        'deleted_at': opts['deletedAt'],
        'description': opts['description'],
        'duration_of_action': opts['durationOfAction'],
        'earliest_measurement_time': opts['earliestMeasurementTime'],
        'earliest_non_tagged_measurement_start_at': opts['earliestNonTaggedMeasurementStartAt'],
        'earliest_non_tagged_measurement_time': opts['earliestNonTaggedMeasurementTime'],
        'earliest_tagged_measurement_start_at': opts['earliestTaggedMeasurementStartAt'],
        'earliest_tagged_measurement_time': opts['earliestTaggedMeasurementTime'],
        'filling_type': opts['fillingType'],
        'filling_value': opts['fillingValue'],
        'id': opts['id'],
        'image_url': opts['imageUrl'],
        'informational_url': opts['informationalUrl'],
        'internal_error_message': opts['internalErrorMessage'],
        'ion_icon': opts['ionIcon'],
        'kurtosis': opts['kurtosis'],
        'last_successful_update_time': opts['lastSuccessfulUpdateTime'],
        'latest_measurement_time': opts['latestMeasurementTime'],
        'latest_non_tagged_measurement_start_at': opts['latestNonTaggedMeasurementStartAt'],
        'latest_non_tagged_measurement_time': opts['latestNonTaggedMeasurementTime'],
        'latest_tagged_measurement_start_at': opts['latestTaggedMeasurementStartAt'],
        'latest_tagged_measurement_time': opts['latestTaggedMeasurementTime'],
        'manual_tracking': opts['manualTracking'],
        'maximum_allowed_value': opts['maximumAllowedValue'],
        'maximum_recorded_value': opts['maximumRecordedValue'],
        'mean': opts['mean'],
        'median': opts['median'],
        'median_seconds_between_measurements': opts['medianSecondsBetweenMeasurements'],
        'minimum_allowed_seconds_between_measurements': opts['minimumAllowedSecondsBetweenMeasurements'],
        'minimum_allowed_value': opts['minimumAllowedValue'],
        'minimum_recorded_value': opts['minimumRecordedValue'],
        'most_common_connector_id': opts['mostCommonConnectorId'],
        'most_common_original_unit_id': opts['mostCommonOriginalUnitId'],
        'most_common_source_name': opts['mostCommonSourceName'],
        'most_common_value': opts['mostCommonValue'],
        'name': opts['name'],
        'newest_data_at': opts['newestDataAt'],
        'number_common_tagged_by': opts['numberCommonTaggedBy'],
        'number_of_aggregate_correlations_as_cause': opts['numberOfAggregateCorrelationsAsCause'],
        'number_of_aggregate_correlations_as_effect': opts['numberOfAggregateCorrelationsAsEffect'],
        'number_of_applications_where_outcome_variable': opts['numberOfApplicationsWhereOutcomeVariable'],
        'number_of_applications_where_predictor_variable': opts['numberOfApplicationsWherePredictorVariable'],
        'number_of_common_tags': opts['numberOfCommonTags'],
        'number_of_common_tags_where_tag_variable': opts['numberOfCommonTagsWhereTagVariable'],
        'number_of_common_tags_where_tagged_variable': opts['numberOfCommonTagsWhereTaggedVariable'],
        'number_of_outcome_case_studies': opts['numberOfOutcomeCaseStudies'],
        'number_of_outcome_population_studies': opts['numberOfOutcomePopulationStudies'],
        'number_of_predictor_population_studies': opts['numberOfPredictorPopulationStudies'],
        'number_of_raw_measurements': opts['numberOfRawMeasurements'],
        'number_of_raw_measurements_with_tags_joins_children': opts['numberOfRawMeasurementsWithTagsJoinsChildren'],
        'number_of_soft_deleted_measurements': opts['numberOfSoftDeletedMeasurements'],
        'number_of_tracking_reminders': opts['numberOfTrackingReminders'],
        'number_of_unique_values': opts['numberOfUniqueValues'],
        'number_of_user_variables': opts['numberOfUserVariables'],
        'onset_delay': opts['onsetDelay'],
        'optimal_value_message': opts['optimalValueMessage'],
        'outcome': opts['outcome'],
        'parent_id': opts['parentId'],
        'price': opts['price'],
        'product_url': opts['productUrl'],
        'public': opts['_public'],
        'reason_for_analysis': opts['reasonForAnalysis'],
        'second_most_common_value': opts['secondMostCommonValue'],
        'skewness': opts['skewness'],
        'standard_deviation': opts['standardDeviation'],
        'status': opts['status'],
        'synonyms': this.apiClient.buildCollectionParam(opts['synonyms'], 'multi'),
        'third_most_common_value': opts['thirdMostCommonValue'],
        'upc_12': opts['upc12'],
        'upc_14': opts['upc14'],
        'updated_at': opts['updatedAt'],
        'user_error_message': opts['userErrorMessage'],
        'valence': opts['valence'],
        'variable_category_id': opts['variableCategoryId'],
        'variance': opts['variance'],
        'wikipedia_title': opts['wikipediaTitle'],
        'wikipedia_url': opts['wikipediaUrl'],
        'wp_post_id': opts['wpPostId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVotes operation.
     * @callback module:api/DefaultApi~listVotesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Votes
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there's a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.offset 
     * @param {Number} opts.causeVariableId 
     * @param {String} opts.clientId 
     * @param {Date} opts.createdAt 
     * @param {Date} opts.deletedAt 
     * @param {Number} opts.effectVariableId 
     * @param {Number} opts.id 
     * @param {Date} opts.updatedAt 
     * @param {Number} opts.userId 
     * @param {Number} opts.value 
     * @param {module:api/DefaultApi~listVotesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listVotes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'cause_variable_id': opts['causeVariableId'],
        'client_id': opts['clientId'],
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'effect_variable_id': opts['effectVariableId'],
        'id': opts['id'],
        'updated_at': opts['updatedAt'],
        'user_id': opts['userId'],
        'value': opts['value']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/votes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeAggregateCorrelation operation.
     * @callback module:api/DefaultApi~storeAggregateCorrelationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a Aggregate Correlation
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * @param {module:api/DefaultApi~storeAggregateCorrelationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeAggregateCorrelation(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/aggregate_correlations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeApplication operation.
     * @callback module:api/DefaultApi~storeApplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a Application
     * Get the settings for your application configurable at https://builder.quantimo.do
     * @param {module:api/DefaultApi~storeApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeApplication(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/applications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeCollaborator operation.
     * @callback module:api/DefaultApi~storeCollaboratorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a Collaborator
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do. 
     * @param {module:api/DefaultApi~storeCollaboratorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeCollaborator(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/collaborators', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeCommonTag operation.
     * @callback module:api/DefaultApi~storeCommonTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a Common Tag
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * @param {module:api/DefaultApi~storeCommonTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeCommonTag(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/common_tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeConnection operation.
     * @callback module:api/DefaultApi~storeConnectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a Connection
     * Connections to 3rd party data sources that we can import from.
     * @param {module:api/DefaultApi~storeConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeConnection(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/connections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeConnector operation.
     * @callback module:api/DefaultApi~storeConnectorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a Connector
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * @param {module:api/DefaultApi~storeConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeConnector(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/connectors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeConnectorImport operation.
     * @callback module:api/DefaultApi~storeConnectorImportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a Connector Import
     * A record of attempts to import from a given data source. 
     * @param {module:api/DefaultApi~storeConnectorImportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeConnectorImport(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/connector_imports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeConnectorRequest operation.
     * @callback module:api/DefaultApi~storeConnectorRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a Connector Request
     * An API request made to an HTTP endpoint during import from a data source. 
     * @param {module:api/DefaultApi~storeConnectorRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeConnectorRequest(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/connector_requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeCorrelation operation.
     * @callback module:api/DefaultApi~storeCorrelationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a Correlation
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * @param {module:api/DefaultApi~storeCorrelationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeCorrelation(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/correlations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeDeviceToken operation.
     * @callback module:api/DefaultApi~storeDeviceTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a Device Token
     * User token needed to send Android, iOS, or web push notifications. 
     * @param {module:api/DefaultApi~storeDeviceTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeDeviceToken(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/device_tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeMeasurement operation.
     * @callback module:api/DefaultApi~storeMeasurementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a Measurement
     * Measurement
     * @param {module:api/DefaultApi~storeMeasurementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeMeasurement(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/measurements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeMeasurementExport operation.
     * @callback module:api/DefaultApi~storeMeasurementExportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a Measurement Export
     * A request from a user to export their data as a spreadsheet. 
     * @param {module:api/DefaultApi~storeMeasurementExportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeMeasurementExport(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/measurement_exports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeMeasurementImport operation.
     * @callback module:api/DefaultApi~storeMeasurementImportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a Measurement Import
     * An uploaded spreadsheet or data file to be imported. 
     * @param {module:api/DefaultApi~storeMeasurementImportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeMeasurementImport(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/measurement_imports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeNotification operation.
     * @callback module:api/DefaultApi~storeNotificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a Notification
     * Tracking reminder notifications, messages, and study results. 
     * @param {module:api/DefaultApi~storeNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeNotification(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/notifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeOAuthAccessToken operation.
     * @callback module:api/DefaultApi~storeOAuthAccessTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a OAuth Access Token
     * Access tokens are the thing that applications use to make API requests on behalf of a user.  
     * @param {module:api/DefaultApi~storeOAuthAccessTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeOAuthAccessToken(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/oauth_access_tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeOAuthClient operation.
     * @callback module:api/DefaultApi~storeOAuthClientCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a OAuth Client
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client. 
     * @param {module:api/DefaultApi~storeOAuthClientCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeOAuthClient(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/oauth_clients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storePost operation.
     * @callback module:api/DefaultApi~storePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a Post
     * Published studies at the Journal of Citizen Science. 
     * @param {module:api/DefaultApi~storePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storePost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/wp_posts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeSentEmail operation.
     * @callback module:api/DefaultApi~storeSentEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a Sent Email
     * A sent email
     * @param {module:api/DefaultApi~storeSentEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeSentEmail(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/sent_emails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeStudy operation.
     * @callback module:api/DefaultApi~storeStudyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a Study
     * Study Analysis Settings Saved by Individuals
     * @param {module:api/DefaultApi~storeStudyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeStudy(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/studies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeTrackingReminder operation.
     * @callback module:api/DefaultApi~storeTrackingReminderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a Tracking Reminder
     * Favorite
     * @param {module:api/DefaultApi~storeTrackingReminderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeTrackingReminder(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/tracking_reminders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeTrackingReminderNotification operation.
     * @callback module:api/DefaultApi~storeTrackingReminderNotificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a Tracking Reminder Notification
     * Specific reminder notification instances that still need to be tracked. 
     * @param {module:api/DefaultApi~storeTrackingReminderNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeTrackingReminderNotification(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/tracking_reminder_notifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeUser operation.
     * @callback module:api/DefaultApi~storeUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a User
     * Overview of discoveries, research from 's data
     * @param {module:api/DefaultApi~storeUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeUserTag operation.
     * @callback module:api/DefaultApi~storeUserTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a User Tag
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis. 
     * @param {module:api/DefaultApi~storeUserTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeUserTag(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/user_tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeUserVariable operation.
     * @callback module:api/DefaultApi~storeUserVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a User Variable
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * @param {module:api/DefaultApi~storeUserVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeUserVariable(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/user_variables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeVariable operation.
     * @callback module:api/DefaultApi~storeVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a Variable
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data. 
     * @param {module:api/DefaultApi~storeVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeVariable(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/variables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeVariableCategory operation.
     * @callback module:api/DefaultApi~storeVariableCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a Variable Category
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * @param {module:api/DefaultApi~storeVariableCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeVariableCategory(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/variable_categories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeVariableUserSource operation.
     * @callback module:api/DefaultApi~storeVariableUserSourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a Variable User Source
     * A list of data sources for a given variable for a given user. 
     * @param {module:api/DefaultApi~storeVariableUserSourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeVariableUserSource(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/variable_user_sources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeVote operation.
     * @callback module:api/DefaultApi~storeVoteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a Vote
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there's a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation. 
     * @param {module:api/DefaultApi~storeVoteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storeVote(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/votes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAggregateCorrelation operation.
     * @callback module:api/DefaultApi~updateAggregateCorrelationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Aggregate Correlation
     * Examination of the likely effects of a predictor variable on an outcome variable on average for the entire population
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateAggregateCorrelationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateAggregateCorrelation(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAggregateCorrelation");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/aggregate_correlations/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApplication operation.
     * @callback module:api/DefaultApi~updateApplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Application
     * Get the settings for your application configurable at https://builder.quantimo.do
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateApplication(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateApplication");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/applications/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCollaborator operation.
     * @callback module:api/DefaultApi~updateCollaboratorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Collaborator
     * Collaborators are allowed to modify settings for applications created at https://builder.quantimo.do. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateCollaboratorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCollaborator(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCollaborator");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/collaborators/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCommonTag operation.
     * @callback module:api/DefaultApi~updateCommonTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Common Tag
     * Variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateCommonTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCommonTag(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCommonTag");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/common_tags/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConnection operation.
     * @callback module:api/DefaultApi~updateConnectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Connection
     * Connections to 3rd party data sources that we can import from.
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateConnection(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateConnection");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/connections/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConnector operation.
     * @callback module:api/DefaultApi~updateConnectorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Connector
     * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateConnector(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateConnector");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/connectors/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConnectorImport operation.
     * @callback module:api/DefaultApi~updateConnectorImportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Connector Import
     * A record of attempts to import from a given data source. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateConnectorImportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateConnectorImport(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateConnectorImport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/connector_imports/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConnectorRequest operation.
     * @callback module:api/DefaultApi~updateConnectorRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Connector Request
     * An API request made to an HTTP endpoint during import from a data source. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateConnectorRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateConnectorRequest(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateConnectorRequest");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/connector_requests/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCorrelation operation.
     * @callback module:api/DefaultApi~updateCorrelationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Correlation
     * Examination of the likely effects of a predictor variable on an outcome variable on average for a specific individual
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateCorrelationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCorrelation(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCorrelation");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/correlations/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceToken operation.
     * @callback module:api/DefaultApi~updateDeviceTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Device Token
     * User token needed to send Android, iOS, or web push notifications. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateDeviceTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDeviceToken(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDeviceToken");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/device_tokens/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMeasurement operation.
     * @callback module:api/DefaultApi~updateMeasurementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Measurement
     * Measurement
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateMeasurementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMeasurement(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateMeasurement");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/measurements/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMeasurementExport operation.
     * @callback module:api/DefaultApi~updateMeasurementExportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Measurement Export
     * A request from a user to export their data as a spreadsheet. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateMeasurementExportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMeasurementExport(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateMeasurementExport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/measurement_exports/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMeasurementImport operation.
     * @callback module:api/DefaultApi~updateMeasurementImportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Measurement Import
     * An uploaded spreadsheet or data file to be imported. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateMeasurementImportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMeasurementImport(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateMeasurementImport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/measurement_imports/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNotification operation.
     * @callback module:api/DefaultApi~updateNotificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Notification
     * Tracking reminder notifications, messages, and study results. 
     * @param {String} id 
     * @param {module:api/DefaultApi~updateNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateNotification(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNotification");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/notifications/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOAuthAccessToken operation.
     * @callback module:api/DefaultApi~updateOAuthAccessTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a OAuth Access Token
     * Access tokens are the thing that applications use to make API requests on behalf of a user.  
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateOAuthAccessTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOAuthAccessToken(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateOAuthAccessToken");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/oauth_access_tokens/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOAuthClient operation.
     * @callback module:api/DefaultApi~updateOAuthClientCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a OAuth Client
     * OAuth clients allow users to permit access to their self-tracking data to the owner of the client. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateOAuthClientCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOAuthClient(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateOAuthClient");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/oauth_clients/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePost operation.
     * @callback module:api/DefaultApi~updatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Post
     * Published studies at the Journal of Citizen Science. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~updatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updatePost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/wp_posts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSentEmail operation.
     * @callback module:api/DefaultApi~updateSentEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Sent Email
     * A sent email
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateSentEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateSentEmail(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSentEmail");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/sent_emails/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStudy operation.
     * @callback module:api/DefaultApi~updateStudyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Study
     * Study Analysis Settings Saved by Individuals
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateStudyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateStudy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateStudy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/studies/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTrackingReminder operation.
     * @callback module:api/DefaultApi~updateTrackingReminderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Tracking Reminder
     * Favorite
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateTrackingReminderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateTrackingReminder(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTrackingReminder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/tracking_reminders/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTrackingReminderNotification operation.
     * @callback module:api/DefaultApi~updateTrackingReminderNotificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Tracking Reminder Notification
     * Specific reminder notification instances that still need to be tracked. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateTrackingReminderNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateTrackingReminderNotification(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTrackingReminderNotification");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/tracking_reminder_notifications/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/DefaultApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a User
     * Overview of discoveries, research from 's data
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateUser(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserTag operation.
     * @callback module:api/DefaultApi~updateUserTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a User Tag
     * User-created variable tags are used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateUserTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateUserTag(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUserTag");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/user_tags/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserVariable operation.
     * @callback module:api/DefaultApi~updateUserVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a User Variable
     * Variable statistics, analysis settings, and overviews with data visualizations and likely outcomes or predictors based on data for a specific individual
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateUserVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateUserVariable(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUserVariable");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/user_variables/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVariable operation.
     * @callback module:api/DefaultApi~updateVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Variable
     * Variable overviews with statistics, analysis settings, and data visualizations and likely outcomes or predictors based on the anonymously aggregated donated data. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateVariable(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateVariable");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/variables/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVariableCategory operation.
     * @callback module:api/DefaultApi~updateVariableCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Variable Category
     * Categories of of trackable variables include Treatments, Emotions, Symptoms, and Foods.
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateVariableCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateVariableCategory(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateVariableCategory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/variable_categories/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVariableUserSource operation.
     * @callback module:api/DefaultApi~updateVariableUserSourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Variable User Source
     * A list of data sources for a given variable for a given user. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateVariableUserSourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateVariableUserSource(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateVariableUserSource");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/variable_user_sources/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVote operation.
     * @callback module:api/DefaultApi~updateVoteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Vote
     * I am really good at finding correlations and even compensating for various onset delays and durations of action. However, you are much better than me at knowing if there's a way that a given factor could plausibly influence an outcome. You can help me learn and get better at my predictions by pressing the thumbs down button for relationships that you think are coincidences and thumbs up for correlations with a plausible causal explanation. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~updateVoteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateVote(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateVote");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v6/votes/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
