/**
 * QuantiModo
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.QuantiModo);
  }
}(this, function(expect, QuantiModo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new QuantiModo.MeasurementsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MeasurementsApi', function() {
    describe('v1MeasurementSourcesGet', function() {
      it('should call v1MeasurementSourcesGet successfully', function(done) {
        //uncomment below and update the code to test v1MeasurementSourcesGet
        //instance.v1MeasurementSourcesGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v1MeasurementSourcesPost', function() {
      it('should call v1MeasurementSourcesPost successfully', function(done) {
        //uncomment below and update the code to test v1MeasurementSourcesPost
        //instance.v1MeasurementSourcesPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v1MeasurementsDailyGet', function() {
      it('should call v1MeasurementsDailyGet successfully', function(done) {
        //uncomment below and update the code to test v1MeasurementsDailyGet
        //instance.v1MeasurementsDailyGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v1MeasurementsDeletePost', function() {
      it('should call v1MeasurementsDeletePost successfully', function(done) {
        //uncomment below and update the code to test v1MeasurementsDeletePost
        //instance.v1MeasurementsDeletePost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v1MeasurementsGet', function() {
      it('should call v1MeasurementsGet successfully', function(done) {
        //uncomment below and update the code to test v1MeasurementsGet
        //instance.v1MeasurementsGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v1MeasurementsPost', function() {
      it('should call v1MeasurementsPost successfully', function(done) {
        //uncomment below and update the code to test v1MeasurementsPost
        //instance.v1MeasurementsPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v1MeasurementsRangeGet', function() {
      it('should call v1MeasurementsRangeGet successfully', function(done) {
        //uncomment below and update the code to test v1MeasurementsRangeGet
        //instance.v1MeasurementsRangeGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v1MeasurementsUpdatePost', function() {
      it('should call v1MeasurementsUpdatePost successfully', function(done) {
        //uncomment below and update the code to test v1MeasurementsUpdatePost
        //instance.v1MeasurementsUpdatePost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v2MeasurementsCsvGet', function() {
      it('should call v2MeasurementsCsvGet successfully', function(done) {
        //uncomment below and update the code to test v2MeasurementsCsvGet
        //instance.v2MeasurementsCsvGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v2MeasurementsRequestCsvPost', function() {
      it('should call v2MeasurementsRequestCsvPost successfully', function(done) {
        //uncomment below and update the code to test v2MeasurementsRequestCsvPost
        //instance.v2MeasurementsRequestCsvPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v2MeasurementsRequestPdfPost', function() {
      it('should call v2MeasurementsRequestPdfPost successfully', function(done) {
        //uncomment below and update the code to test v2MeasurementsRequestPdfPost
        //instance.v2MeasurementsRequestPdfPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('v2MeasurementsRequestXlsPost', function() {
      it('should call v2MeasurementsRequestXlsPost successfully', function(done) {
        //uncomment below and update the code to test v2MeasurementsRequestXlsPost
        //instance.v2MeasurementsRequestXlsPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
