/**
 * QuantiModo
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.QuantiModo) {
      root.QuantiModo = {};
    }
    root.QuantiModo.Permission = factory(root.QuantiModo.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Permission model module.
   * @module model/Permission
   * @version 2.0
   */

  /**
   * Constructs a new <code>Permission</code>.
   * @alias module:model/Permission
   * @class
   * @param target {Number} Grant permission to target user or public so they may access measurements within the given parameters. TODO: Rename target to something more intuitive.
   * @param variableName {String} ORIGINAL Variable name
   * @param minTimestamp {Number} Earliest time when measurements will be accessible in epoch seconds
   * @param maxTimestamp {Number} Latest time when measurements will be accessible in epoch seconds
   * @param minTimeOfDay {Number} Earliest time of day when measurements will be accessible in epoch seconds
   * @param maxTimeOfDay {Number} Latest time of day when measurements will be accessible in epoch seconds
   * @param week {String} Maybe specifies if only weekday measurements should be accessible
   */
  var exports = function(target, variableName, minTimestamp, maxTimestamp, minTimeOfDay, maxTimeOfDay, week) {
    var _this = this;

    _this['target'] = target;
    _this['variableName'] = variableName;
    _this['minTimestamp'] = minTimestamp;
    _this['maxTimestamp'] = maxTimestamp;
    _this['minTimeOfDay'] = minTimeOfDay;
    _this['maxTimeOfDay'] = maxTimeOfDay;
    _this['week'] = week;
  };

  /**
   * Constructs a <code>Permission</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Permission} obj Optional instance to populate.
   * @return {module:model/Permission} The populated <code>Permission</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('target')) {
        obj['target'] = ApiClient.convertToType(data['target'], 'Number');
      }
      if (data.hasOwnProperty('variableName')) {
        obj['variableName'] = ApiClient.convertToType(data['variableName'], 'String');
      }
      if (data.hasOwnProperty('minTimestamp')) {
        obj['minTimestamp'] = ApiClient.convertToType(data['minTimestamp'], 'Number');
      }
      if (data.hasOwnProperty('maxTimestamp')) {
        obj['maxTimestamp'] = ApiClient.convertToType(data['maxTimestamp'], 'Number');
      }
      if (data.hasOwnProperty('minTimeOfDay')) {
        obj['minTimeOfDay'] = ApiClient.convertToType(data['minTimeOfDay'], 'Number');
      }
      if (data.hasOwnProperty('maxTimeOfDay')) {
        obj['maxTimeOfDay'] = ApiClient.convertToType(data['maxTimeOfDay'], 'Number');
      }
      if (data.hasOwnProperty('week')) {
        obj['week'] = ApiClient.convertToType(data['week'], 'String');
      }
    }
    return obj;
  }

  /**
   * Grant permission to target user or public so they may access measurements within the given parameters. TODO: Rename target to something more intuitive.
   * @member {Number} target
   */
  exports.prototype['target'] = undefined;
  /**
   * ORIGINAL Variable name
   * @member {String} variableName
   */
  exports.prototype['variableName'] = undefined;
  /**
   * Earliest time when measurements will be accessible in epoch seconds
   * @member {Number} minTimestamp
   */
  exports.prototype['minTimestamp'] = undefined;
  /**
   * Latest time when measurements will be accessible in epoch seconds
   * @member {Number} maxTimestamp
   */
  exports.prototype['maxTimestamp'] = undefined;
  /**
   * Earliest time of day when measurements will be accessible in epoch seconds
   * @member {Number} minTimeOfDay
   */
  exports.prototype['minTimeOfDay'] = undefined;
  /**
   * Latest time of day when measurements will be accessible in epoch seconds
   * @member {Number} maxTimeOfDay
   */
  exports.prototype['maxTimeOfDay'] = undefined;
  /**
   * Maybe specifies if only weekday measurements should be accessible
   * @member {String} week
   */
  exports.prototype['week'] = undefined;



  return exports;
}));


