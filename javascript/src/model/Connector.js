/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import Button from './Button';
import ConnectInstructions from './ConnectInstructions';





/**
* The Connector model module.
* @module model/Connector
* @version 2.0
*/
export default class Connector {
    /**
    * Constructs a new <code>Connector</code>.
    * @alias module:model/Connector
    * @class
    * @param connected {Boolean} True if the authenticated user has this connector enabled
    * @param connectInstructions {module:model/ConnectInstructions} URL and parameters used when connecting to a service
    * @param displayName {String} Connector pretty display name
    * @param getItUrl {String} URL to a site where one can get this device or application
    * @param id {Number} Connector ID number
    * @param image {String} URL to the image of the connector logo
    * @param lastUpdate {Number} Epoch timestamp of last sync
    * @param name {String} Connector lowercase system name
    * @param totalMeasurementsInLastUpdate {Number} Number of measurements obtained during latest update
    */

    constructor(connected, connectInstructions, displayName, getItUrl, id, image, lastUpdate, name, totalMeasurementsInLastUpdate) {
        

        
        

        this['connected'] = connected;this['connectInstructions'] = connectInstructions;this['displayName'] = displayName;this['getItUrl'] = getItUrl;this['id'] = id;this['image'] = image;this['lastUpdate'] = lastUpdate;this['name'] = name;this['totalMeasurementsInLastUpdate'] = totalMeasurementsInLastUpdate;

        
    }

    /**
    * Constructs a <code>Connector</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Connector} obj Optional instance to populate.
    * @return {module:model/Connector} The populated <code>Connector</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Connector();

            
            
            

            if (data.hasOwnProperty('affiliate')) {
                obj['affiliate'] = ApiClient.convertToType(data['affiliate'], 'Boolean');
            }
            if (data.hasOwnProperty('backgroundColor')) {
                obj['backgroundColor'] = ApiClient.convertToType(data['backgroundColor'], 'String');
            }
            if (data.hasOwnProperty('buttons')) {
                obj['buttons'] = ApiClient.convertToType(data['buttons'], [Button]);
            }
            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('connected')) {
                obj['connected'] = ApiClient.convertToType(data['connected'], 'Boolean');
            }
            if (data.hasOwnProperty('connectError')) {
                obj['connectError'] = ApiClient.convertToType(data['connectError'], 'String');
            }
            if (data.hasOwnProperty('connectInstructions')) {
                obj['connectInstructions'] = ConnectInstructions.constructFromObject(data['connectInstructions']);
            }
            if (data.hasOwnProperty('connectorClientId')) {
                obj['connectorClientId'] = ApiClient.convertToType(data['connectorClientId'], 'String');
            }
            if (data.hasOwnProperty('connectorId')) {
                obj['connectorId'] = ApiClient.convertToType(data['connectorId'], 'Number');
            }
            if (data.hasOwnProperty('connectStatus')) {
                obj['connectStatus'] = ApiClient.convertToType(data['connectStatus'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'String');
            }
            if (data.hasOwnProperty('defaultVariableCategoryName')) {
                obj['defaultVariableCategoryName'] = ApiClient.convertToType(data['defaultVariableCategoryName'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Number');
            }
            if (data.hasOwnProperty('getItUrl')) {
                obj['getItUrl'] = ApiClient.convertToType(data['getItUrl'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('imageHtml')) {
                obj['imageHtml'] = ApiClient.convertToType(data['imageHtml'], 'String');
            }
            if (data.hasOwnProperty('lastSuccessfulUpdatedAt')) {
                obj['lastSuccessfulUpdatedAt'] = ApiClient.convertToType(data['lastSuccessfulUpdatedAt'], 'String');
            }
            if (data.hasOwnProperty('lastUpdate')) {
                obj['lastUpdate'] = ApiClient.convertToType(data['lastUpdate'], 'Number');
            }
            if (data.hasOwnProperty('linkedDisplayNameHtml')) {
                obj['linkedDisplayNameHtml'] = ApiClient.convertToType(data['linkedDisplayNameHtml'], 'String');
            }
            if (data.hasOwnProperty('longDescription')) {
                obj['longDescription'] = ApiClient.convertToType(data['longDescription'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('mobileConnectMethod')) {
                obj['mobileConnectMethod'] = ApiClient.convertToType(data['mobileConnectMethod'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('platforms')) {
                obj['platforms'] = ApiClient.convertToType(data['platforms'], ['String']);
            }
            if (data.hasOwnProperty('premium')) {
                obj['premium'] = ApiClient.convertToType(data['premium'], 'Boolean');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], ['String']);
            }
            if (data.hasOwnProperty('shortDescription')) {
                obj['shortDescription'] = ApiClient.convertToType(data['shortDescription'], 'String');
            }
            if (data.hasOwnProperty('spreadsheetUpload')) {
                obj['spreadsheetUpload'] = ApiClient.convertToType(data['spreadsheetUpload'], 'Boolean');
            }
            if (data.hasOwnProperty('totalMeasurementsInLastUpdate')) {
                obj['totalMeasurementsInLastUpdate'] = ApiClient.convertToType(data['totalMeasurementsInLastUpdate'], 'Number');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'String');
            }
            if (data.hasOwnProperty('updateRequestedAt')) {
                obj['updateRequestedAt'] = ApiClient.convertToType(data['updateRequestedAt'], 'String');
            }
            if (data.hasOwnProperty('updateStatus')) {
                obj['updateStatus'] = ApiClient.convertToType(data['updateStatus'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'Number');
            }
        }
        return obj;
    }

    /**
    * Ex: false
    * @member {Boolean} affiliate
    */
    affiliate = undefined;
    /**
    * Background color HEX code that matches the icon
    * @member {String} backgroundColor
    */
    backgroundColor = undefined;
    /**
    * @member {Array.<module:model/Button>} buttons
    */
    buttons = undefined;
    /**
    * Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do
    * @member {String} clientId
    */
    clientId = undefined;
    /**
    * True if the authenticated user has this connector enabled
    * @member {Boolean} connected
    */
    connected = undefined;
    /**
    * Ex: Your token is expired. Please re-connect
    * @member {String} connectError
    */
    connectError = undefined;
    /**
    * URL and parameters used when connecting to a service
    * @member {module:model/ConnectInstructions} connectInstructions
    */
    connectInstructions = undefined;
    /**
    * Ex: 225078261031461
    * @member {String} connectorClientId
    */
    connectorClientId = undefined;
    /**
    * Ex: 8
    * @member {Number} connectorId
    */
    connectorId = undefined;
    /**
    * Ex: CONNECTED
    * @member {String} connectStatus
    */
    connectStatus = undefined;
    /**
    * Ex: 2000-01-01 00:00:00 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
    * @member {String} createdAt
    */
    createdAt = undefined;
    /**
    * Ex: Social Interactions
    * @member {String} defaultVariableCategoryName
    */
    defaultVariableCategoryName = undefined;
    /**
    * Connector pretty display name
    * @member {String} displayName
    */
    displayName = undefined;
    /**
    * Ex: 1
    * @member {Number} enabled
    */
    enabled = undefined;
    /**
    * URL to a site where one can get this device or application
    * @member {String} getItUrl
    */
    getItUrl = undefined;
    /**
    * Connector ID number
    * @member {Number} id
    */
    id = undefined;
    /**
    * URL to the image of the connector logo
    * @member {String} image
    */
    image = undefined;
    /**
    * Ex: <a href=\"http://www.facebook.com\"><img id=\"facebook_image\" title=\"Facebook\" src=\"https://i.imgur.com/GhwqK4f.png\" alt=\"Facebook\"></a>
    * @member {String} imageHtml
    */
    imageHtml = undefined;
    /**
    * Ex: 2017-07-31 10:10:34 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
    * @member {String} lastSuccessfulUpdatedAt
    */
    lastSuccessfulUpdatedAt = undefined;
    /**
    * Epoch timestamp of last sync
    * @member {Number} lastUpdate
    */
    lastUpdate = undefined;
    /**
    * Ex: <a href=\"http://www.facebook.com\">Facebook</a>
    * @member {String} linkedDisplayNameHtml
    */
    linkedDisplayNameHtml = undefined;
    /**
    * Ex: Facebook is a social networking website where users may create a personal profile, add other users as friends, and exchange messages.
    * @member {String} longDescription
    */
    longDescription = undefined;
    /**
    * Ex: Got 412 new measurements on 2017-07-31 10:10:34
    * @member {String} message
    */
    message = undefined;
    /**
    * Mobile connect method: webview, cordova, google, spreadsheet, or ip
    * @member {String} mobileConnectMethod
    */
    mobileConnectMethod = undefined;
    /**
    * Connector lowercase system name
    * @member {String} name
    */
    name = undefined;
    /**
    * Platforms (chrome, android, ios, web) that you can connect on.
    * @member {Array.<String>} platforms
    */
    platforms = undefined;
    /**
    * True if connection requires upgrade
    * @member {Boolean} premium
    */
    premium = undefined;
    /**
    * Required connector scopes
    * @member {Array.<String>} scopes
    */
    scopes = undefined;
    /**
    * Ex: Tracks social interaction. QuantiModo requires permission to access your Facebook \"user likes\" and \"user posts\".
    * @member {String} shortDescription
    */
    shortDescription = undefined;
    /**
    * True if the user must upload a spreadsheet.  Post the uploaded spreadsheet with your clientId and user accessToken to https://app.quantimo.do/api/v2/spreadsheetUpload
    * @member {Boolean} spreadsheetUpload
    */
    spreadsheetUpload = undefined;
    /**
    * Number of measurements obtained during latest update
    * @member {Number} totalMeasurementsInLastUpdate
    */
    totalMeasurementsInLastUpdate = undefined;
    /**
    * Ex: 2017-07-31 10:10:34 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
    * @member {String} updatedAt
    */
    updatedAt = undefined;
    /**
    * Ex: 2017-07-18 05:16:31 UTC ISO 8601 YYYY-MM-DDThh:mm:ss
    * @member {String} updateRequestedAt
    */
    updateRequestedAt = undefined;
    /**
    * Ex: UPDATED
    * @member {String} updateStatus
    */
    updateStatus = undefined;
    /**
    * Ex: 230
    * @member {Number} userId
    */
    userId = undefined;








}


