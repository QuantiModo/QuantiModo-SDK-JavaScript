/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';





/**
* The Measurement model module.
* @module model/Measurement
* @version 2.0
*/
export default class Measurement {
    /**
    * Constructs a new <code>Measurement</code>.
    * @alias module:model/Measurement
    * @class
    * @param sourceName {String} Application or device used to record the measurement values
    * @param startTimeString {String} Start Time for the measurement event in UTC ISO 8601 YYYY-MM-DDThh:mm:ss
    * @param unitAbbreviatedName {String} Abbreviated name for the unit of measurement
    * @param value {Number} Converted measurement value in requested unit
    * @param variableName {String} Name of the variable for which we are creating the measurement records
    */

    constructor(sourceName, startTimeString, unitAbbreviatedName, value, variableName) {
        

        
        

        this['sourceName'] = sourceName;this['startTimeString'] = startTimeString;this['unitAbbreviatedName'] = unitAbbreviatedName;this['value'] = value;this['variableName'] = variableName;

        
    }

    /**
    * Constructs a <code>Measurement</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Measurement} obj Optional instance to populate.
    * @return {module:model/Measurement} The populated <code>Measurement</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Measurement();

            
            
            

            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('connectorId')) {
                obj['connectorId'] = ApiClient.convertToType(data['connectorId'], 'Number');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'String');
            }
            if (data.hasOwnProperty('displayValueAndUnitString')) {
                obj['displayValueAndUnitString'] = ApiClient.convertToType(data['displayValueAndUnitString'], 'String');
            }
            if (data.hasOwnProperty('iconIcon')) {
                obj['iconIcon'] = ApiClient.convertToType(data['iconIcon'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('inputType')) {
                obj['inputType'] = ApiClient.convertToType(data['inputType'], 'String');
            }
            if (data.hasOwnProperty('ionIcon')) {
                obj['ionIcon'] = ApiClient.convertToType(data['ionIcon'], 'String');
            }
            if (data.hasOwnProperty('manualTracking')) {
                obj['manualTracking'] = ApiClient.convertToType(data['manualTracking'], 'Boolean');
            }
            if (data.hasOwnProperty('maximumAllowedValue')) {
                obj['maximumAllowedValue'] = ApiClient.convertToType(data['maximumAllowedValue'], 'Number');
            }
            if (data.hasOwnProperty('minimumAllowedValue')) {
                obj['minimumAllowedValue'] = ApiClient.convertToType(data['minimumAllowedValue'], 'Number');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('noteObject')) {
                obj['noteObject'] = ApiClient.convertToType(data['noteObject'], Object);
            }
            if (data.hasOwnProperty('noteHtml')) {
                obj['noteHtml'] = ApiClient.convertToType(data['noteHtml'], Object);
            }
            if (data.hasOwnProperty('originalUnitId')) {
                obj['originalUnitId'] = ApiClient.convertToType(data['originalUnitId'], 'Number');
            }
            if (data.hasOwnProperty('originalValue')) {
                obj['originalValue'] = ApiClient.convertToType(data['originalValue'], 'Number');
            }
            if (data.hasOwnProperty('pngPath')) {
                obj['pngPath'] = ApiClient.convertToType(data['pngPath'], 'String');
            }
            if (data.hasOwnProperty('pngUrl')) {
                obj['pngUrl'] = ApiClient.convertToType(data['pngUrl'], 'String');
            }
            if (data.hasOwnProperty('productUrl')) {
                obj['productUrl'] = ApiClient.convertToType(data['productUrl'], 'String');
            }
            if (data.hasOwnProperty('sourceName')) {
                obj['sourceName'] = ApiClient.convertToType(data['sourceName'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'String');
            }
            if (data.hasOwnProperty('startTimeEpoch')) {
                obj['startTimeEpoch'] = ApiClient.convertToType(data['startTimeEpoch'], 'Number');
            }
            if (data.hasOwnProperty('startTimeString')) {
                obj['startTimeString'] = ApiClient.convertToType(data['startTimeString'], 'String');
            }
            if (data.hasOwnProperty('svgUrl')) {
                obj['svgUrl'] = ApiClient.convertToType(data['svgUrl'], 'String');
            }
            if (data.hasOwnProperty('unitAbbreviatedName')) {
                obj['unitAbbreviatedName'] = ApiClient.convertToType(data['unitAbbreviatedName'], 'String');
            }
            if (data.hasOwnProperty('unitCategoryId')) {
                obj['unitCategoryId'] = ApiClient.convertToType(data['unitCategoryId'], 'Number');
            }
            if (data.hasOwnProperty('unitCategoryName')) {
                obj['unitCategoryName'] = ApiClient.convertToType(data['unitCategoryName'], 'String');
            }
            if (data.hasOwnProperty('unitId')) {
                obj['unitId'] = ApiClient.convertToType(data['unitId'], 'Number');
            }
            if (data.hasOwnProperty('unitName')) {
                obj['unitName'] = ApiClient.convertToType(data['unitName'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('userVariableUnitAbbreviatedName')) {
                obj['userVariableUnitAbbreviatedName'] = ApiClient.convertToType(data['userVariableUnitAbbreviatedName'], 'String');
            }
            if (data.hasOwnProperty('userVariableUnitCategoryId')) {
                obj['userVariableUnitCategoryId'] = ApiClient.convertToType(data['userVariableUnitCategoryId'], 'Number');
            }
            if (data.hasOwnProperty('userVariableUnitCategoryName')) {
                obj['userVariableUnitCategoryName'] = ApiClient.convertToType(data['userVariableUnitCategoryName'], 'String');
            }
            if (data.hasOwnProperty('userVariableUnitId')) {
                obj['userVariableUnitId'] = ApiClient.convertToType(data['userVariableUnitId'], 'Number');
            }
            if (data.hasOwnProperty('userVariableUnitName')) {
                obj['userVariableUnitName'] = ApiClient.convertToType(data['userVariableUnitName'], 'String');
            }
            if (data.hasOwnProperty('userVariableVariableCategoryId')) {
                obj['userVariableVariableCategoryId'] = ApiClient.convertToType(data['userVariableVariableCategoryId'], 'Number');
            }
            if (data.hasOwnProperty('userVariableVariableCategoryName')) {
                obj['userVariableVariableCategoryName'] = ApiClient.convertToType(data['userVariableVariableCategoryName'], 'String');
            }
            if (data.hasOwnProperty('valence')) {
                obj['valence'] = ApiClient.convertToType(data['valence'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
            if (data.hasOwnProperty('variableCategoryId')) {
                obj['variableCategoryId'] = ApiClient.convertToType(data['variableCategoryId'], 'Number');
            }
            if (data.hasOwnProperty('variableCategoryImageUrl')) {
                obj['variableCategoryImageUrl'] = ApiClient.convertToType(data['variableCategoryImageUrl'], 'String');
            }
            if (data.hasOwnProperty('variableCategoryName')) {
                obj['variableCategoryName'] = ApiClient.convertToType(data['variableCategoryName'], 'String');
            }
            if (data.hasOwnProperty('variableDescription')) {
                obj['variableDescription'] = ApiClient.convertToType(data['variableDescription'], 'String');
            }
            if (data.hasOwnProperty('variableId')) {
                obj['variableId'] = ApiClient.convertToType(data['variableId'], 'Number');
            }
            if (data.hasOwnProperty('variableName')) {
                obj['variableName'] = ApiClient.convertToType(data['variableName'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
        }
        return obj;
    }

    /**
    * Ex: quantimodo
    * @member {String} clientId
    */
    clientId = undefined;
    /**
    * Ex: 13
    * @member {Number} connectorId
    */
    connectorId = undefined;
    /**
    * Ex: 2017-07-30 21:08:36
    * @member {String} createdAt
    */
    createdAt = undefined;
    /**
    * Examples: 3/5, $10, or 1 count
    * @member {String} displayValueAndUnitString
    */
    displayValueAndUnitString = undefined;
    /**
    * Ex: ion-sad-outline
    * @member {String} iconIcon
    */
    iconIcon = undefined;
    /**
    * Ex: 1051466127
    * @member {Number} id
    */
    id = undefined;
    /**
    * Ex: value
    * @member {String} inputType
    */
    inputType = undefined;
    /**
    * Ex: ion-ios-medkit-outline
    * @member {String} ionIcon
    */
    ionIcon = undefined;
    /**
    * Ex: 1
    * @member {Boolean} manualTracking
    */
    manualTracking = undefined;
    /**
    * Ex: 5
    * @member {Number} maximumAllowedValue
    */
    maximumAllowedValue = undefined;
    /**
    * Ex: 1
    * @member {Number} minimumAllowedValue
    */
    minimumAllowedValue = undefined;
    /**
    * Note of measurement
    * @member {String} note
    */
    note = undefined;
    /**
    * Additional meta data for the measurement
    * @member {Object} noteObject
    */
    noteObject = undefined;
    /**
    * Embeddable HTML with message hyperlinked with associated url
    * @member {Object} noteHtml
    */
    noteHtml = undefined;
    /**
    * Ex: 23
    * @member {Number} originalUnitId
    */
    originalUnitId = undefined;
    /**
    * Original value as originally submitted
    * @member {Number} originalValue
    */
    originalValue = undefined;
    /**
    * Ex: img/variable_categories/treatments.png
    * @member {String} pngPath
    */
    pngPath = undefined;
    /**
    * Ex: https://quantimodo.quantimo.do/ionic/Modo/www/img/variable_categories/treatments.png
    * @member {String} pngUrl
    */
    pngUrl = undefined;
    /**
    * Link to associated product for purchase
    * @member {String} productUrl
    */
    productUrl = undefined;
    /**
    * Application or device used to record the measurement values
    * @member {String} sourceName
    */
    sourceName = undefined;
    /**
    * Ex: 2014-08-27
    * @member {String} startDate
    */
    startDate = undefined;
    /**
    * Seconds between the start of the event measured and 1970 (Unix timestamp)
    * @member {Number} startTimeEpoch
    */
    startTimeEpoch = undefined;
    /**
    * Start Time for the measurement event in UTC ISO 8601 YYYY-MM-DDThh:mm:ss
    * @member {String} startTimeString
    */
    startTimeString = undefined;
    /**
    * Ex: https://quantimodo.quantimo.do/ionic/Modo/www/img/variable_categories/treatments.svg
    * @member {String} svgUrl
    */
    svgUrl = undefined;
    /**
    * Abbreviated name for the unit of measurement
    * @member {String} unitAbbreviatedName
    */
    unitAbbreviatedName = undefined;
    /**
    * Ex: 6
    * @member {Number} unitCategoryId
    */
    unitCategoryId = undefined;
    /**
    * Ex: Miscellany
    * @member {String} unitCategoryName
    */
    unitCategoryName = undefined;
    /**
    * Ex: 23
    * @member {Number} unitId
    */
    unitId = undefined;
    /**
    * Ex: Count
    * @member {String} unitName
    */
    unitName = undefined;
    /**
    * Ex: 2017-07-30 21:08:36
    * @member {String} updatedAt
    */
    updatedAt = undefined;
    /**
    * Link to associated Facebook like or Github commit, for instance
    * @member {String} url
    */
    url = undefined;
    /**
    * Ex: count
    * @member {String} userVariableUnitAbbreviatedName
    */
    userVariableUnitAbbreviatedName = undefined;
    /**
    * Ex: 6
    * @member {Number} userVariableUnitCategoryId
    */
    userVariableUnitCategoryId = undefined;
    /**
    * Ex: Miscellany
    * @member {String} userVariableUnitCategoryName
    */
    userVariableUnitCategoryName = undefined;
    /**
    * Ex: 23
    * @member {Number} userVariableUnitId
    */
    userVariableUnitId = undefined;
    /**
    * Ex: Count
    * @member {String} userVariableUnitName
    */
    userVariableUnitName = undefined;
    /**
    * Ex: 13
    * @member {Number} userVariableVariableCategoryId
    */
    userVariableVariableCategoryId = undefined;
    /**
    * Ex: Treatments
    * @member {String} userVariableVariableCategoryName
    */
    userVariableVariableCategoryName = undefined;
    /**
    * Ex: negative
    * @member {String} valence
    */
    valence = undefined;
    /**
    * Converted measurement value in requested unit
    * @member {Number} value
    */
    value = undefined;
    /**
    * Ex: 13
    * @member {Number} variableCategoryId
    */
    variableCategoryId = undefined;
    /**
    * Ex: https://maxcdn.icons8.com/Color/PNG/96/Healthcare/pill-96.png
    * @member {String} variableCategoryImageUrl
    */
    variableCategoryImageUrl = undefined;
    /**
    * Ex: Treatments
    * @member {String} variableCategoryName
    */
    variableCategoryName = undefined;
    /**
    * Ex: negative
    * @member {String} variableDescription
    */
    variableDescription = undefined;
    /**
    * Ex: 5956846
    * @member {Number} variableId
    */
    variableId = undefined;
    /**
    * Name of the variable for which we are creating the measurement records
    * @member {String} variableName
    */
    variableName = undefined;
    /**
    * Ex: Trader Joe's Bedtime Tea
    * @member {String} displayName
    */
    displayName = undefined;








}


