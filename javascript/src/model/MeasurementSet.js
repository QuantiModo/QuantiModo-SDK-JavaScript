/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import MeasurementItem from './MeasurementItem';





/**
* The MeasurementSet model module.
* @module model/MeasurementSet
* @version 2.0
*/
export default class MeasurementSet {
    /**
    * Constructs a new <code>MeasurementSet</code>.
    * @alias module:model/MeasurementSet
    * @class
    * @param measurementItems {Array.<module:model/MeasurementItem>} Array of timestamps, values, and optional notes
    * @param sourceName {String} Name of the application or device used to record the measurement values
    * @param unitAbbreviatedName {String} Unit of measurement
    * @param variableName {String} ORIGINAL name of the variable for which we are creating the measurement records
    */

    constructor(measurementItems, sourceName, unitAbbreviatedName, variableName) {
        

        
        

        this['measurementItems'] = measurementItems;this['sourceName'] = sourceName;this['unitAbbreviatedName'] = unitAbbreviatedName;this['variableName'] = variableName;

        
    }

    /**
    * Constructs a <code>MeasurementSet</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/MeasurementSet} obj Optional instance to populate.
    * @return {module:model/MeasurementSet} The populated <code>MeasurementSet</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MeasurementSet();

            
            
            

            if (data.hasOwnProperty('combinationOperation')) {
                obj['combinationOperation'] = ApiClient.convertToType(data['combinationOperation'], 'String');
            }
            if (data.hasOwnProperty('measurementItems')) {
                obj['measurementItems'] = ApiClient.convertToType(data['measurementItems'], [MeasurementItem]);
            }
            if (data.hasOwnProperty('sourceName')) {
                obj['sourceName'] = ApiClient.convertToType(data['sourceName'], 'String');
            }
            if (data.hasOwnProperty('unitAbbreviatedName')) {
                obj['unitAbbreviatedName'] = ApiClient.convertToType(data['unitAbbreviatedName'], 'String');
            }
            if (data.hasOwnProperty('variableCategoryName')) {
                obj['variableCategoryName'] = ApiClient.convertToType(data['variableCategoryName'], 'String');
            }
            if (data.hasOwnProperty('variableName')) {
                obj['variableName'] = ApiClient.convertToType(data['variableName'], 'String');
            }
            if (data.hasOwnProperty('upc')) {
                obj['upc'] = ApiClient.convertToType(data['upc'], 'String');
            }
        }
        return obj;
    }

    /**
    * Way to aggregate measurements over time. Options are \"MEAN\" or \"SUM\". SUM should be used for things like minutes of exercise.  If you use MEAN for exercise, then a person might exercise more minutes in one day but add separate measurements that were smaller.  So when we are doing correlational analysis, we would think that the person exercised less that day even though they exercised more.  Conversely, we must use MEAN for things such as ratings which cannot be SUMMED.
    * @member {module:model/MeasurementSet.CombinationOperationEnum} combinationOperation
    */
    combinationOperation = undefined;
    /**
    * Array of timestamps, values, and optional notes
    * @member {Array.<module:model/MeasurementItem>} measurementItems
    */
    measurementItems = undefined;
    /**
    * Name of the application or device used to record the measurement values
    * @member {String} sourceName
    */
    sourceName = undefined;
    /**
    * Unit of measurement
    * @member {String} unitAbbreviatedName
    */
    unitAbbreviatedName = undefined;
    /**
    * Variable category name
    * @member {String} variableCategoryName
    */
    variableCategoryName = undefined;
    /**
    * ORIGINAL name of the variable for which we are creating the measurement records
    * @member {String} variableName
    */
    variableName = undefined;
    /**
    * UPC or other barcode scan result
    * @member {String} upc
    */
    upc = undefined;






    /**
    * Allowed values for the <code>combinationOperation</code> property.
    * @enum {String}
    * @readonly
    */
    static CombinationOperationEnum = {
    
        /**
         * value: "MEAN"
         * @const
         */
        "MEAN": "MEAN",
    
        /**
         * value: "SUM"
         * @const
         */
        "SUM": "SUM"    
    };



}


