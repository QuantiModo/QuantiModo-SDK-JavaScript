/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';





/**
* The ConversionStep model module.
* @module model/ConversionStep
* @version 2.0
*/
export default class ConversionStep {
    /**
    * Constructs a new <code>ConversionStep</code>.
    * @alias module:model/ConversionStep
    * @class
    * @param operation {module:model/ConversionStep.OperationEnum} ADD or MULTIPLY
    * @param value {Number} This specifies the order of conversion steps starting with 0
    */

    constructor(operation, value) {
        

        
        

        this['operation'] = operation;this['value'] = value;

        
    }

    /**
    * Constructs a <code>ConversionStep</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/ConversionStep} obj Optional instance to populate.
    * @return {module:model/ConversionStep} The populated <code>ConversionStep</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConversionStep();

            
            
            

            if (data.hasOwnProperty('operation')) {
                obj['operation'] = ApiClient.convertToType(data['operation'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
    * ADD or MULTIPLY
    * @member {module:model/ConversionStep.OperationEnum} operation
    */
    operation = undefined;
    /**
    * This specifies the order of conversion steps starting with 0
    * @member {Number} value
    */
    value = undefined;






    /**
    * Allowed values for the <code>operation</code> property.
    * @enum {String}
    * @readonly
    */
    static OperationEnum = {
    
        /**
         * value: "ADD"
         * @const
         */
        "ADD": "ADD",
    
        /**
         * value: "MULTIPLY"
         * @const
         */
        "MULTIPLY": "MULTIPLY"    
    };



}


