/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.100414
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Series', 'model/Tooltip'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Series'), require('./Tooltip'));
  } else {
    // Browser globals (root is window)
    if (!root.Quantimodo) {
      root.Quantimodo = {};
    }
    root.Quantimodo.Series = factory(root.Quantimodo.ApiClient, root.Quantimodo.Series, root.Quantimodo.Tooltip);
  }
}(this, function(ApiClient, Series, Tooltip) {
  'use strict';




  /**
   * The Series model module.
   * @module model/Series
   * @version 5.8.1109
   */

  /**
   * Constructs a new <code>Series</code>.
   * @alias module:model/Series
   * @class
   * @param color {String} Example: rgba(223, 83, 83, .5)
   * @param data {Array.<module:model/Series>} 
   * @param name {String} Example: Reference And Learning Hours by Barometric Pressure
   * @param tooltip {module:model/Tooltip} 
   * @param type {String} Example: spline
   * @param yAxis {Number} Example: 1
   */
  var exports = function(color, data, name, tooltip, type, yAxis) {
    var _this = this;

    _this['color'] = color;
    _this['data'] = data;
    _this['name'] = name;
    _this['tooltip'] = tooltip;
    _this['type'] = type;
    _this['yAxis'] = yAxis;
  };

  /**
   * Constructs a <code>Series</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Series} obj Optional instance to populate.
   * @return {module:model/Series} The populated <code>Series</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('color')) {
        obj['color'] = ApiClient.convertToType(data['color'], 'String');
      }
      if (data.hasOwnProperty('data')) {
        obj['data'] = ApiClient.convertToType(data['data'], [Series]);
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('tooltip')) {
        obj['tooltip'] = Tooltip.constructFromObject(data['tooltip']);
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('yAxis')) {
        obj['yAxis'] = ApiClient.convertToType(data['yAxis'], 'Number');
      }
    }
    return obj;
  }

  /**
   * Example: rgba(223, 83, 83, .5)
   * @member {String} color
   */
  exports.prototype['color'] = undefined;
  /**
   * @member {Array.<module:model/Series>} data
   */
  exports.prototype['data'] = undefined;
  /**
   * Example: Reference And Learning Hours by Barometric Pressure
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * @member {module:model/Tooltip} tooltip
   */
  exports.prototype['tooltip'] = undefined;
  /**
   * Example: spline
   * @member {String} type
   */
  exports.prototype['type'] = undefined;
  /**
   * Example: 1
   * @member {Number} yAxis
   */
  exports.prototype['yAxis'] = undefined;



  return exports;
}));


