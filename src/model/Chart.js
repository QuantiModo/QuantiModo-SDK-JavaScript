/**
 * quantimodo
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.100414
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Animation', 'model/ChartConfig'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Animation'), require('./ChartConfig'));
  } else {
    // Browser globals (root is window)
    if (!root.Quantimodo) {
      root.Quantimodo = {};
    }
    root.Quantimodo.Chart = factory(root.Quantimodo.ApiClient, root.Quantimodo.Animation, root.Quantimodo.ChartConfig);
  }
}(this, function(ApiClient, Animation, ChartConfig) {
  'use strict';




  /**
   * The Chart model module.
   * @module model/Chart
   * @version 5.8.1114
   */

  /**
   * Constructs a new <code>Chart</code>.
   * @alias module:model/Chart
   * @class
   * @param animation {module:model/Animation} 
   * @param chartConfig {module:model/ChartConfig} 
   * @param chartId {String} Example: correlationScatterPlot
   * @param chartTitle {String} Example: Reference And Learning Hours following Barometric Pressure (R = 0.147)
   * @param explanation {String} Example: The chart above indicates that an increase in Barometric Pressure is usually followed by an increase in Reference And Learning Hours.
   * @param height {Number} Example: 300
   * @param renderTo {String} Example: BarContainer
   * @param type {String} Example: scatter
   * @param zoomType {String} Example: xy
   */
  var exports = function(animation, chartConfig, chartId, chartTitle, explanation, height, renderTo, type, zoomType) {
    var _this = this;

    _this['animation'] = animation;
    _this['chartConfig'] = chartConfig;
    _this['chartId'] = chartId;
    _this['chartTitle'] = chartTitle;
    _this['explanation'] = explanation;
    _this['height'] = height;
    _this['renderTo'] = renderTo;
    _this['type'] = type;
    _this['zoomType'] = zoomType;
  };

  /**
   * Constructs a <code>Chart</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Chart} obj Optional instance to populate.
   * @return {module:model/Chart} The populated <code>Chart</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('animation')) {
        obj['animation'] = Animation.constructFromObject(data['animation']);
      }
      if (data.hasOwnProperty('chartConfig')) {
        obj['chartConfig'] = ChartConfig.constructFromObject(data['chartConfig']);
      }
      if (data.hasOwnProperty('chartId')) {
        obj['chartId'] = ApiClient.convertToType(data['chartId'], 'String');
      }
      if (data.hasOwnProperty('chartTitle')) {
        obj['chartTitle'] = ApiClient.convertToType(data['chartTitle'], 'String');
      }
      if (data.hasOwnProperty('explanation')) {
        obj['explanation'] = ApiClient.convertToType(data['explanation'], 'String');
      }
      if (data.hasOwnProperty('height')) {
        obj['height'] = ApiClient.convertToType(data['height'], 'Number');
      }
      if (data.hasOwnProperty('renderTo')) {
        obj['renderTo'] = ApiClient.convertToType(data['renderTo'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('zoomType')) {
        obj['zoomType'] = ApiClient.convertToType(data['zoomType'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {module:model/Animation} animation
   */
  exports.prototype['animation'] = undefined;
  /**
   * @member {module:model/ChartConfig} chartConfig
   */
  exports.prototype['chartConfig'] = undefined;
  /**
   * Example: correlationScatterPlot
   * @member {String} chartId
   */
  exports.prototype['chartId'] = undefined;
  /**
   * Example: Reference And Learning Hours following Barometric Pressure (R = 0.147)
   * @member {String} chartTitle
   */
  exports.prototype['chartTitle'] = undefined;
  /**
   * Example: The chart above indicates that an increase in Barometric Pressure is usually followed by an increase in Reference And Learning Hours.
   * @member {String} explanation
   */
  exports.prototype['explanation'] = undefined;
  /**
   * Example: 300
   * @member {Number} height
   */
  exports.prototype['height'] = undefined;
  /**
   * Example: BarContainer
   * @member {String} renderTo
   */
  exports.prototype['renderTo'] = undefined;
  /**
   * Example: scatter
   * @member {String} type
   */
  exports.prototype['type'] = undefined;
  /**
   * Example: xy
   * @member {String} zoomType
   */
  exports.prototype['zoomType'] = undefined;



  return exports;
}));


