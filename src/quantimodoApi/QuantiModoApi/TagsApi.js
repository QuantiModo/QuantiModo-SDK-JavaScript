/**
 * QuantiModo
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['quantimodoApi/ApiClient', 'quantimodoApi/quantimodoApi/CommonResponse', 'quantimodoApi/quantimodoApi/UserTag'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../quantimodoApi/CommonResponse'), require('../quantimodoApi/UserTag'));
  } else {
    // Browser globals (root is window)
    if (!root.quantimodoApi) {
      root.quantimodoApi = {};
    }
    root.quantimodoApi.TagsApi = factory(root.quantimodoApi.ApiClient, root.quantimodoApi.CommonResponse, root.quantimodoApi.UserTag);
  }
}(this, function(ApiClient, CommonResponse, UserTag) {
  'use strict';

  /**
   * Tags service.
   * @module quantimodoApi/QuantiModoApi/TagsApi
   * @version 5.8.724
   */

  /**
   * Constructs a new TagsApi. 
   * @alias module:quantimodoApi/QuantiModoApi/TagsApi
   * @class
   * @param {module:quantimodoApi/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:quantimodoApi/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the v1UserTagsDeletePost operation.
     * @callback module:quantimodoApi/QuantiModoApi/TagsApi~v1UserTagsDeletePostCallback
     * @param {String} error Error message, if any.
     * @param {module:quantimodoApi/quantimodoApi/CommonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete user tag or ingredient
     * Delete previously created user tags or ingredients.
     * @param {Number} taggedVariableId This is the id of the variable being tagged with an ingredient or something.
     * @param {Number} tagVariableId This is the id of the ingredient variable whose value is determined based on the value of the tagged variable.
     * @param {module:quantimodoApi/QuantiModoApi/TagsApi~v1UserTagsDeletePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:quantimodoApi/quantimodoApi/CommonResponse}
     */
    this.v1UserTagsDeletePost = function(taggedVariableId, tagVariableId, callback) {
      var postBody = null;

      // verify the required parameter 'taggedVariableId' is set
      if (taggedVariableId === undefined || taggedVariableId === null) {
        throw new Error("Missing the required parameter 'taggedVariableId' when calling v1UserTagsDeletePost");
      }

      // verify the required parameter 'tagVariableId' is set
      if (tagVariableId === undefined || tagVariableId === null) {
        throw new Error("Missing the required parameter 'tagVariableId' when calling v1UserTagsDeletePost");
      }


      var pathParams = {
      };
      var queryParams = {
        'taggedVariableId': taggedVariableId,
        'tagVariableId': tagVariableId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token', 'quantimodo_oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommonResponse;

      return this.apiClient.callApi(
        '/v1/userTags/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1UserTagsPost operation.
     * @callback module:quantimodoApi/QuantiModoApi/TagsApi~v1UserTagsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:quantimodoApi/quantimodoApi/CommonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post or update user tags or ingredients
     * This endpoint allows users to tag foods with their ingredients.  This information will then be used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     * @param {module:quantimodoApi/quantimodoApi/UserTag} body Contains the new user tag data
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessToken User&#39;s OAuth2 access token
     * @param {Number} opts.userId User&#39;s id
     * @param {module:quantimodoApi/QuantiModoApi/TagsApi~v1UserTagsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:quantimodoApi/quantimodoApi/CommonResponse}
     */
    this.v1UserTagsPost = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v1UserTagsPost");
      }


      var pathParams = {
      };
      var queryParams = {
        'access_token': opts['accessToken'],
        'userId': opts['userId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token', 'quantimodo_oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommonResponse;

      return this.apiClient.callApi(
        '/v1/userTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
