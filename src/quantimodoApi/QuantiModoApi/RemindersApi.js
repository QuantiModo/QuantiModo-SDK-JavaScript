/**
 * QuantiModo
 * QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['quantimodoApi/ApiClient', 'quantimodoApi/quantimodoApi/CommonResponse', 'quantimodoApi/quantimodoApi/InlineResponse200', 'quantimodoApi/quantimodoApi/InlineResponse2001', 'quantimodoApi/quantimodoApi/InlineResponse2002', 'quantimodoApi/quantimodoApi/TrackingReminder', 'quantimodoApi/quantimodoApi/TrackingReminderDelete', 'quantimodoApi/quantimodoApi/TrackingReminderNotificationSkip', 'quantimodoApi/quantimodoApi/TrackingReminderNotificationSnooze', 'quantimodoApi/quantimodoApi/TrackingReminderNotificationTrack'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../quantimodoApi/CommonResponse'), require('../quantimodoApi/InlineResponse200'), require('../quantimodoApi/InlineResponse2001'), require('../quantimodoApi/InlineResponse2002'), require('../quantimodoApi/TrackingReminder'), require('../quantimodoApi/TrackingReminderDelete'), require('../quantimodoApi/TrackingReminderNotificationSkip'), require('../quantimodoApi/TrackingReminderNotificationSnooze'), require('../quantimodoApi/TrackingReminderNotificationTrack'));
  } else {
    // Browser globals (root is window)
    if (!root.quantimodoApi) {
      root.quantimodoApi = {};
    }
    root.quantimodoApi.RemindersApi = factory(root.quantimodoApi.ApiClient, root.quantimodoApi.CommonResponse, root.quantimodoApi.InlineResponse200, root.quantimodoApi.InlineResponse2001, root.quantimodoApi.InlineResponse2002, root.quantimodoApi.TrackingReminder, root.quantimodoApi.TrackingReminderDelete, root.quantimodoApi.TrackingReminderNotificationSkip, root.quantimodoApi.TrackingReminderNotificationSnooze, root.quantimodoApi.TrackingReminderNotificationTrack);
  }
}(this, function(ApiClient, CommonResponse, InlineResponse200, InlineResponse2001, InlineResponse2002, TrackingReminder, TrackingReminderDelete, TrackingReminderNotificationSkip, TrackingReminderNotificationSnooze, TrackingReminderNotificationTrack) {
  'use strict';

  /**
   * Reminders service.
   * @module quantimodoApi/QuantiModoApi/RemindersApi
   * @version 5.8.724
   */

  /**
   * Constructs a new RemindersApi. 
   * @alias module:quantimodoApi/QuantiModoApi/RemindersApi
   * @class
   * @param {module:quantimodoApi/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:quantimodoApi/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the v1TrackingReminderNotificationsGet operation.
     * @callback module:quantimodoApi/QuantiModoApi/RemindersApi~v1TrackingReminderNotificationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:quantimodoApi/quantimodoApi/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific pending tracking reminders
     * Specfic pending reminder instances that still need to be tracked.  
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessToken User&#39;s OAuth2 access token
     * @param {Number} opts.userId User&#39;s id
     * @param {String} opts.variableCategoryName Limit tracking reminder notifications to a specific variable category
     * @param {String} opts.createdAt When the record was first created. Use UTC ISO 8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot;  datetime format. Time zone should be UTC and not local.
     * @param {String} opts.updatedAt When the record was last updated. Use UTC ISO 8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot;  datetime format. Time zone should be UTC and not local.
     * @param {Number} opts.limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records.
     * @param {Number} opts.offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned.
     * @param {String} opts.sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order.
     * @param {module:quantimodoApi/QuantiModoApi/RemindersApi~v1TrackingReminderNotificationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:quantimodoApi/quantimodoApi/InlineResponse2002}
     */
    this.v1TrackingReminderNotificationsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'access_token': opts['accessToken'],
        'userId': opts['userId'],
        'variableCategoryName': opts['variableCategoryName'],
        'createdAt': opts['createdAt'],
        'updatedAt': opts['updatedAt'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token', 'quantimodo_oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/v1/trackingReminderNotifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1TrackingReminderNotificationsSkipPost operation.
     * @callback module:quantimodoApi/QuantiModoApi/RemindersApi~v1TrackingReminderNotificationsSkipPostCallback
     * @param {String} error Error message, if any.
     * @param {module:quantimodoApi/quantimodoApi/CommonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Skip a pending tracking reminder
     * Deletes the pending tracking reminder
     * @param {module:quantimodoApi/quantimodoApi/TrackingReminderNotificationSkip} body Id of the pending reminder to be skipped or deleted
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessToken User&#39;s OAuth2 access token
     * @param {Number} opts.userId User&#39;s id
     * @param {module:quantimodoApi/QuantiModoApi/RemindersApi~v1TrackingReminderNotificationsSkipPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:quantimodoApi/quantimodoApi/CommonResponse}
     */
    this.v1TrackingReminderNotificationsSkipPost = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v1TrackingReminderNotificationsSkipPost");
      }


      var pathParams = {
      };
      var queryParams = {
        'access_token': opts['accessToken'],
        'userId': opts['userId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token', 'quantimodo_oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommonResponse;

      return this.apiClient.callApi(
        '/v1/trackingReminderNotifications/skip', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1TrackingReminderNotificationsSnoozePost operation.
     * @callback module:quantimodoApi/QuantiModoApi/RemindersApi~v1TrackingReminderNotificationsSnoozePostCallback
     * @param {String} error Error message, if any.
     * @param {module:quantimodoApi/quantimodoApi/CommonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Snooze a pending tracking reminder
     * Changes the reminder time to now plus one hour
     * @param {module:quantimodoApi/quantimodoApi/TrackingReminderNotificationSnooze} body Id of the pending reminder to be snoozed
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessToken User&#39;s OAuth2 access token
     * @param {Number} opts.userId User&#39;s id
     * @param {module:quantimodoApi/QuantiModoApi/RemindersApi~v1TrackingReminderNotificationsSnoozePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:quantimodoApi/quantimodoApi/CommonResponse}
     */
    this.v1TrackingReminderNotificationsSnoozePost = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v1TrackingReminderNotificationsSnoozePost");
      }


      var pathParams = {
      };
      var queryParams = {
        'access_token': opts['accessToken'],
        'userId': opts['userId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token', 'quantimodo_oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommonResponse;

      return this.apiClient.callApi(
        '/v1/trackingReminderNotifications/snooze', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1TrackingReminderNotificationsTrackPost operation.
     * @callback module:quantimodoApi/QuantiModoApi/RemindersApi~v1TrackingReminderNotificationsTrackPostCallback
     * @param {String} error Error message, if any.
     * @param {module:quantimodoApi/quantimodoApi/CommonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Track a pending tracking reminder
     * Adds the default measurement for the pending tracking reminder with the reminder time as the measurment start time
     * @param {module:quantimodoApi/quantimodoApi/TrackingReminderNotificationTrack} body Id of the pending reminder to be tracked
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessToken User&#39;s OAuth2 access token
     * @param {Number} opts.userId User&#39;s id
     * @param {module:quantimodoApi/QuantiModoApi/RemindersApi~v1TrackingReminderNotificationsTrackPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:quantimodoApi/quantimodoApi/CommonResponse}
     */
    this.v1TrackingReminderNotificationsTrackPost = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v1TrackingReminderNotificationsTrackPost");
      }


      var pathParams = {
      };
      var queryParams = {
        'access_token': opts['accessToken'],
        'userId': opts['userId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token', 'quantimodo_oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommonResponse;

      return this.apiClient.callApi(
        '/v1/trackingReminderNotifications/track', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1TrackingRemindersDeletePost operation.
     * @callback module:quantimodoApi/QuantiModoApi/RemindersApi~v1TrackingRemindersDeletePostCallback
     * @param {String} error Error message, if any.
     * @param {module:quantimodoApi/quantimodoApi/CommonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete tracking reminder
     * Delete previously created tracking reminder
     * @param {module:quantimodoApi/quantimodoApi/TrackingReminderDelete} body Id of reminder to be deleted
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessToken User&#39;s OAuth2 access token
     * @param {Number} opts.userId User&#39;s id
     * @param {module:quantimodoApi/QuantiModoApi/RemindersApi~v1TrackingRemindersDeletePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:quantimodoApi/quantimodoApi/CommonResponse}
     */
    this.v1TrackingRemindersDeletePost = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v1TrackingRemindersDeletePost");
      }


      var pathParams = {
      };
      var queryParams = {
        'access_token': opts['accessToken'],
        'userId': opts['userId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token', 'quantimodo_oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommonResponse;

      return this.apiClient.callApi(
        '/v1/trackingReminders/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1TrackingRemindersGet operation.
     * @callback module:quantimodoApi/QuantiModoApi/RemindersApi~v1TrackingRemindersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:quantimodoApi/quantimodoApi/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get repeating tracking reminder settings
     * Users can be reminded to track certain variables at a specified frequency with a default value.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessToken User&#39;s OAuth2 access token
     * @param {Number} opts.userId User&#39;s id
     * @param {String} opts.variableCategoryName Limit tracking reminders to a specific variable category
     * @param {String} opts.createdAt When the record was first created. Use UTC ISO 8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot;  datetime format. Time zone should be UTC and not local.
     * @param {String} opts.updatedAt When the record was last updated. Use UTC ISO 8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot;  datetime format. Time zone should be UTC and not local.
     * @param {Number} opts.limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records.
     * @param {Number} opts.offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned.
     * @param {String} opts.sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order.
     * @param {module:quantimodoApi/QuantiModoApi/RemindersApi~v1TrackingRemindersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:quantimodoApi/quantimodoApi/InlineResponse200}
     */
    this.v1TrackingRemindersGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'access_token': opts['accessToken'],
        'userId': opts['userId'],
        'variableCategoryName': opts['variableCategoryName'],
        'createdAt': opts['createdAt'],
        'updatedAt': opts['updatedAt'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token', 'quantimodo_oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/v1/trackingReminders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the v1TrackingRemindersPost operation.
     * @callback module:quantimodoApi/QuantiModoApi/RemindersApi~v1TrackingRemindersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:quantimodoApi/quantimodoApi/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store a Tracking Reminder
     * This is to enable users to create reminders to track a variable with a default value at a specified frequency
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessToken User&#39;s OAuth2 access token
     * @param {Number} opts.userId User&#39;s id
     * @param {module:quantimodoApi/quantimodoApi/TrackingReminder} opts.body TrackingReminder that should be stored
     * @param {module:quantimodoApi/QuantiModoApi/RemindersApi~v1TrackingRemindersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:quantimodoApi/quantimodoApi/InlineResponse2001}
     */
    this.v1TrackingRemindersPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
        'access_token': opts['accessToken'],
        'userId': opts['userId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['access_token', 'quantimodo_oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/v1/trackingReminders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
